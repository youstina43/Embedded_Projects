
Automated_Door_Control_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00000d1c  00000d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d17  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000acf  00000000  00000000  00002ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000103b  00000000  00000000  000037b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  000047f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000725  00000000  00000000  00004b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015ca  00000000  00000000  00005295  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  0000685f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
  7a:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEY_VoidInit>:
};
	
void KEY_VoidInit(void)
{
		//Setting Rows to Input Pullup
	DIO_setPinDirection(ROWS_PORT,KPD_R1_PIN,DIO_INITIAL_OUTPUT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	65 e0       	ldi	r22, 0x05	; 5
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(ROWS_PORT,KPD_R2_PIN,DIO_INITIAL_OUTPUT);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	64 e0       	ldi	r22, 0x04	; 4
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(ROWS_PORT,KPD_R3_PIN,DIO_INITIAL_OUTPUT);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(ROWS_PORT,KPD_R4_PIN,DIO_INITIAL_OUTPUT);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	
	DIO_setPinValue(ROWS_PORT,KPD_R1_PIN,DIO_INITIAL_OUTPUT_HIGH);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	65 e0       	ldi	r22, 0x05	; 5
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	DIO_setPinValue(ROWS_PORT,KPD_R2_PIN,DIO_INITIAL_OUTPUT_HIGH);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	64 e0       	ldi	r22, 0x04	; 4
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	DIO_setPinValue(ROWS_PORT,KPD_R3_PIN,DIO_INITIAL_OUTPUT_HIGH);
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	63 e0       	ldi	r22, 0x03	; 3
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	DIO_setPinValue(ROWS_PORT,KPD_R4_PIN,DIO_INITIAL_OUTPUT_HIGH);
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	//Setting Columns to Output High
	DIO_setPinDirection(COLS_PORT,KPD_C1_PIN,DIO_INITIAL_INPUT);
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(COLS_PORT,KPD_C2_PIN,DIO_INITIAL_INPUT);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	66 e0       	ldi	r22, 0x06	; 6
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(COLS_PORT,KPD_C3_PIN,DIO_INITIAL_INPUT);
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(COLS_PORT,KPD_C4_PIN,DIO_INITIAL_INPUT);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	
    DIO_setPinValue(COLS_PORT,KPD_C1_PIN,DIO_INITIAL_INPUT_PULLUP);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	67 e0       	ldi	r22, 0x07	; 7
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
    DIO_setPinValue(COLS_PORT,KPD_C2_PIN,DIO_INITIAL_INPUT_PULLUP);
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	66 e0       	ldi	r22, 0x06	; 6
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
    DIO_setPinValue(COLS_PORT,KPD_C3_PIN,DIO_INITIAL_INPUT_PULLUP);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	64 e0       	ldi	r22, 0x04	; 4
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
    DIO_setPinValue(COLS_PORT,KPD_C4_PIN,DIO_INITIAL_INPUT_PULLUP);
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	63 e0       	ldi	r22, 0x03	; 3
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
 122:	08 95       	ret

00000124 <Key_U8PressedKey>:


}
u8 Key_U8PressedKey()
{
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	61 97       	sbiw	r28, 0x11	; 17
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedSwitch = KEYPAD_NOT_PRESSED;
	u8 Local_u8aKeyPadMap[KEYPAD_ROWS_NO][KEYPAD_COLUMNS_NO] = KPD_KEYS;
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	e8 e6       	ldi	r30, 0x68	; 104
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	de 01       	movw	r26, r28
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	8a 95       	dec	r24
 156:	e1 f7       	brne	.-8      	; 0x150 <Key_U8PressedKey+0x2c>
	u8 Local_u8CurrentCol;
	u8 Local_u8CurrentRow;
	u8 Local_u8CurrentStatus;

		for (Local_u8CurrentRow = 0 ;Local_u8CurrentRow < KEYPAD_ROWS_NO ;Local_u8CurrentRow++)
 158:	00 e0       	ldi	r16, 0x00	; 0


}
u8 Key_U8PressedKey()
{
	u8 Local_u8PressedSwitch = KEYPAD_NOT_PRESSED;
 15a:	bb 24       	eor	r11, r11
 15c:	ba 94       	dec	r11
	u8 Local_u8aKeyPadMap[KEYPAD_ROWS_NO][KEYPAD_COLUMNS_NO] = KPD_KEYS;
	u8 Local_u8CurrentCol;
	u8 Local_u8CurrentRow;
	u8 Local_u8CurrentStatus;

		for (Local_u8CurrentRow = 0 ;Local_u8CurrentRow < KEYPAD_ROWS_NO ;Local_u8CurrentRow++)
 15e:	42 c0       	rjmp	.+132    	; 0x1e4 <Key_U8PressedKey+0xc0>

	{
		DIO_setPinValue(ROWS_PORT,ROW_ARR[Local_u8CurrentRow],DIO_PIN_LOW);
 160:	c0 2e       	mov	r12, r16
 162:	d1 2c       	mov	r13, r1
 164:	f6 01       	movw	r30, r12
 166:	e0 5a       	subi	r30, 0xA0	; 160
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	60 81       	ld	r22, Z
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	for (Local_u8CurrentCol = 0;Local_u8CurrentCol < KEYPAD_COLUMNS_NO ;Local_u8CurrentCol++)
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	2b c0       	rjmp	.+86     	; 0x1ce <Key_U8PressedKey+0xaa>

		{
			DIO_getPinValue(COLS_PORT,COL_ARR[Local_u8CurrentCol] , &Local_u8CurrentStatus);
 178:	e1 2e       	mov	r14, r17
 17a:	f1 2c       	mov	r15, r1
 17c:	f7 01       	movw	r30, r14
 17e:	ec 59       	subi	r30, 0x9C	; 156
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	ae 01       	movw	r20, r28
 184:	4f 5e       	subi	r20, 0xEF	; 239
 186:	5f 4f       	sbci	r21, 0xFF	; 255
 188:	60 81       	ld	r22, Z
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 2e 04 	call	0x85c	; 0x85c <DIO_getPinValue>
			/*If Switch is pressed */
			if (Local_u8CurrentStatus == DIO_PIN_LOW   ) //as pin is pull up
 190:	89 89       	ldd	r24, Y+17	; 0x11
 192:	81 11       	cpse	r24, r1
 194:	1b c0       	rjmp	.+54     	; 0x1cc <Key_U8PressedKey+0xa8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	2f e1       	ldi	r18, 0x1F	; 31
 198:	31 ea       	ldi	r19, 0xA1	; 161
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	30 40       	sbci	r19, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <Key_U8PressedKey+0x78>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <Key_U8PressedKey+0x82>
 1a6:	00 00       	nop
			{  
				_delay_ms(2500);
				/*Wait For Debouncing*/
				/*If Switch is pressed */
			if (Local_u8CurrentStatus == DIO_PIN_LOW ) //as pin is pull up
 1a8:	89 89       	ldd	r24, Y+17	; 0x11
 1aa:	81 11       	cpse	r24, r1
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <Key_U8PressedKey+0xa8>
				{
			Local_u8PressedSwitch = Local_u8aKeyPadMap[Local_u8CurrentRow][Local_u8CurrentCol];
 1ae:	c6 01       	movw	r24, r12
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	2c 0f       	add	r18, r28
 1be:	3d 1f       	adc	r19, r29
 1c0:	82 0f       	add	r24, r18
 1c2:	93 1f       	adc	r25, r19
 1c4:	fc 01       	movw	r30, r24
 1c6:	ee 0d       	add	r30, r14
 1c8:	ff 1d       	adc	r31, r15
 1ca:	b0 80       	ld	r11, Z

		for (Local_u8CurrentRow = 0 ;Local_u8CurrentRow < KEYPAD_ROWS_NO ;Local_u8CurrentRow++)

	{
		DIO_setPinValue(ROWS_PORT,ROW_ARR[Local_u8CurrentRow],DIO_PIN_LOW);
	for (Local_u8CurrentCol = 0;Local_u8CurrentCol < KEYPAD_COLUMNS_NO ;Local_u8CurrentCol++)
 1cc:	1f 5f       	subi	r17, 0xFF	; 255
 1ce:	14 30       	cpi	r17, 0x04	; 4
 1d0:	98 f2       	brcs	.-90     	; 0x178 <Key_U8PressedKey+0x54>

				}
			}
		}
		/*Deactivate the column*/
		DIO_setPinValue(ROWS_PORT,ROW_ARR[Local_u8CurrentRow],DIO_PIN_HIGH);
 1d2:	f6 01       	movw	r30, r12
 1d4:	e0 5a       	subi	r30, 0xA0	; 160
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	60 81       	ld	r22, Z
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	u8 Local_u8aKeyPadMap[KEYPAD_ROWS_NO][KEYPAD_COLUMNS_NO] = KPD_KEYS;
	u8 Local_u8CurrentCol;
	u8 Local_u8CurrentRow;
	u8 Local_u8CurrentStatus;

		for (Local_u8CurrentRow = 0 ;Local_u8CurrentRow < KEYPAD_ROWS_NO ;Local_u8CurrentRow++)
 1e2:	0f 5f       	subi	r16, 0xFF	; 255
 1e4:	04 30       	cpi	r16, 0x04	; 4
 1e6:	08 f4       	brcc	.+2      	; 0x1ea <Key_U8PressedKey+0xc6>
 1e8:	bb cf       	rjmp	.-138    	; 0x160 <Key_U8PressedKey+0x3c>
		/*Deactivate the column*/
		DIO_setPinValue(ROWS_PORT,ROW_ARR[Local_u8CurrentRow],DIO_PIN_HIGH);

	}
	return Local_u8PressedSwitch ;
 1ea:	8b 2d       	mov	r24, r11
 1ec:	61 96       	adiw	r28, 0x11	; 17
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	bf 90       	pop	r11
 20a:	08 95       	ret

0000020c <Private_VidWriteHalfPort>:




void Private_VidWriteHalfPort(u8 Cpy_u8HalfData)
{
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_DATA_PORT,LCD_D4_Pin,GET_BIT(Cpy_u8HalfData,0));
 210:	48 2f       	mov	r20, r24
 212:	41 70       	andi	r20, 0x01	; 1
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	DIO_setPinValue(LCD_DATA_PORT,LCD_D5_Pin,GET_BIT(Cpy_u8HalfData,1));
 21c:	c1 fb       	bst	r28, 1
 21e:	44 27       	eor	r20, r20
 220:	40 f9       	bld	r20, 0
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	DIO_setPinValue(LCD_DATA_PORT,LCD_D6_Pin,GET_BIT(Cpy_u8HalfData,2));
 22a:	c2 fb       	bst	r28, 2
 22c:	44 27       	eor	r20, r20
 22e:	40 f9       	bld	r20, 0
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	DIO_setPinValue(LCD_DATA_PORT,LCD_D7_Pin,GET_BIT(Cpy_u8HalfData,3));
 238:	c3 fb       	bst	r28, 3
 23a:	44 27       	eor	r20, r20
 23c:	40 f9       	bld	r20, 0
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
}
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <LCD_Write_CMD>:
	// Set Entry Mode
	LCD_Write_CMD(0b00000110);
	
}

void LCD_Write_CMD(u8 CMD){
 24a:	cf 93       	push	r28
 24c:	c8 2f       	mov	r28, r24
	
	
	//Setting RS pin to low to write "Command"
DIO_setPinValue(LCD_CMD_PORT,RS_PIN,DIO_PIN_LOW);
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	63 e0       	ldi	r22, 0x03	; 3
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	//Sending The 4 MSB
	Private_VidWriteHalfPort(CMD>>4);
 258:	8c 2f       	mov	r24, r28
 25a:	82 95       	swap	r24
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	0e 94 06 01 	call	0x20c	; 0x20c <Private_VidWriteHalfPort>
	//Enable for sending command confirmation
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_Write_CMD+0x26>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_Write_CMD+0x2c>
 276:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	//Sending The 4 LSB
	Private_VidWriteHalfPort(CMD);
 282:	8c 2f       	mov	r24, r28
 284:	0e 94 06 01 	call	0x20c	; 0x20c <Private_VidWriteHalfPort>
	//Enable for sending command confirmation
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
 292:	8f e9       	ldi	r24, 0x9F	; 159
 294:	9f e0       	ldi	r25, 0x0F	; 15
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Write_CMD+0x4c>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_Write_CMD+0x52>
 29c:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);	
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
}
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <LCD_GoTo>:
}


void LCD_GoTo(u8 ROW, u8 COL)
{
	switch (ROW)
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	59 f0       	breq	.+22     	; 0x2c6 <LCD_GoTo+0x1a>
 2b0:	28 f0       	brcs	.+10     	; 0x2bc <LCD_GoTo+0x10>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	69 f0       	breq	.+26     	; 0x2d0 <LCD_GoTo+0x24>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	81 f0       	breq	.+32     	; 0x2da <LCD_GoTo+0x2e>
 2ba:	08 95       	ret
	{
		//Sending Move Cursor command + DDRAM Row Position + DDRAM Row Position
		case 0: LCD_Write_CMD(0b10000000 + 0x00 + COL);
 2bc:	80 e8       	ldi	r24, 0x80	; 128
 2be:	86 0f       	add	r24, r22
 2c0:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
		break;
 2c4:	08 95       	ret
		case 1: LCD_Write_CMD(0b10000000 + 0x40 + COL);
 2c6:	80 ec       	ldi	r24, 0xC0	; 192
 2c8:	86 0f       	add	r24, r22
 2ca:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
		break;
 2ce:	08 95       	ret
		case 2: LCD_Write_CMD(0b10000000 + 0x14 + COL);
 2d0:	84 e9       	ldi	r24, 0x94	; 148
 2d2:	86 0f       	add	r24, r22
 2d4:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
		break;
 2d8:	08 95       	ret
		case 3:LCD_Write_CMD(0b10000000 + 0x54 + COL);
 2da:	84 ed       	ldi	r24, 0xD4	; 212
 2dc:	86 0f       	add	r24, r22
 2de:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
 2e2:	08 95       	ret

000002e4 <LCD_Clear>:
}


void LCD_Clear(void)
{
	LCD_Write_CMD(CMD_Clear_Display);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
 2ea:	08 95       	ret

000002ec <LCD_init>:
#include "DIO_Interface.h"

#include "LCD_interface.h"

void LCD_init(){
	DIO_setPinDirection(LCD_CMD_PORT,RS_PIN,DIO_PIN_OUTPUT);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CMD_PORT,RW_PIN,DIO_PIN_OUTPUT);
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CMD_PORT,E_PIN,DIO_PIN_OUTPUT);
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	
	DIO_setPinDirection(LCD_DATA_PORT,LCD_D4_Pin,DIO_PIN_OUTPUT);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT,LCD_D5_Pin,DIO_PIN_OUTPUT);
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT,LCD_D6_Pin,DIO_PIN_OUTPUT);
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT,LCD_D7_Pin,DIO_PIN_OUTPUT);
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_setPinDirection>
 332:	2f e7       	ldi	r18, 0x7F	; 127
 334:	85 eb       	ldi	r24, 0xB5	; 181
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <LCD_init+0x4c>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_init+0x56>
 342:	00 00       	nop
	
	_delay_ms(35);

	//Setting RS pin to low to write "Command"
	DIO_setPinValue(LCD_CMD_PORT,RS_PIN,DIO_PIN_LOW);
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	63 e0       	ldi	r22, 0x03	; 3
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	Private_VidWriteHalfPort(0b0010);
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	0e 94 06 01 	call	0x20c	; 0x20c <Private_VidWriteHalfPort>
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
 35e:	8f e9       	ldi	r24, 0x9F	; 159
 360:	9f e0       	ldi	r25, 0x0F	; 15
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCD_init+0x76>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_init+0x7c>
 368:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>


	LCD_Write_CMD(0b00101000);
 374:	88 e2       	ldi	r24, 0x28	; 40
 376:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	90 ef       	ldi	r25, 0xF0	; 240
 37c:	9a 95       	dec	r25
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_init+0x90>
	_delay_us(45);

	// Display on off Control (DisplayOn, Cursor on, Blink on)
	LCD_Write_CMD(0b00001111);
 380:	8f e0       	ldi	r24, 0x0F	; 15
 382:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
 386:	20 ef       	ldi	r18, 0xF0	; 240
 388:	2a 95       	dec	r18
 38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_init+0x9c>
	_delay_us(45);

	// Clear Display
	LCD_Write_CMD(0b00000001);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 392:	8f e3       	ldi	r24, 0x3F	; 63
 394:	9f e1       	ldi	r25, 0x1F	; 31
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <LCD_init+0xaa>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_init+0xb0>
 39c:	00 00       	nop
	_delay_ms(2);

	// Set Entry Mode
	LCD_Write_CMD(0b00000110);
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write_CMD>
 3a4:	08 95       	ret

000003a6 <LCD_Write_CHAR>:
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);	
}

void LCD_Write_CHAR(u8 CHAR){
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
	
	//Setting RS pin to low to write "Command"
DIO_setPinValue(LCD_CMD_PORT,RS_PIN,DIO_PIN_HIGH);
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	//Sending The 4 MSB
	Private_VidWriteHalfPort(CHAR>>4);
 3b4:	8c 2f       	mov	r24, r28
 3b6:	82 95       	swap	r24
 3b8:	8f 70       	andi	r24, 0x0F	; 15
 3ba:	0e 94 06 01 	call	0x20c	; 0x20c <Private_VidWriteHalfPort>
	//Enable for sending command confirmation
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
 3c8:	8f e9       	ldi	r24, 0x9F	; 159
 3ca:	9f e0       	ldi	r25, 0x0F	; 15
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_Write_CHAR+0x26>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_Write_CHAR+0x2c>
 3d2:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	
	//Sending The 4 LSB
	Private_VidWriteHalfPort(CHAR);
 3de:	8c 2f       	mov	r24, r28
 3e0:	0e 94 06 01 	call	0x20c	; 0x20c <Private_VidWriteHalfPort>
	//Enable for sending command confirmation
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
 3ee:	8f e9       	ldi	r24, 0x9F	; 159
 3f0:	9f e0       	ldi	r25, 0x0F	; 15
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_Write_CHAR+0x4c>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_Write_CHAR+0x52>
 3f8:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
	
	
	
}
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <LCD_WriteString>:
void LCD_Clear(void)
{
	LCD_Write_CMD(CMD_Clear_Display);
}

void LCD_WriteString(const u8 * str){
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	ec 01       	movw	r28, r24
	
	while( (*str) !='\0'){
 40e:	03 c0       	rjmp	.+6      	; 0x416 <LCD_WriteString+0xe>
		
		
		LCD_Write_CHAR(*str);
 410:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_Write_CHAR>
		str++;
 414:	21 96       	adiw	r28, 0x01	; 1
	LCD_Write_CMD(CMD_Clear_Display);
}

void LCD_WriteString(const u8 * str){
	
	while( (*str) !='\0'){
 416:	88 81       	ld	r24, Y
 418:	81 11       	cpse	r24, r1
 41a:	fa cf       	rjmp	.-12     	; 0x410 <LCD_WriteString+0x8>
		str++;
		
	}
	
	
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <SRVM_voidOn>:
#include "TMR1_Private.h"

#include "ServoM_Interface.h"

void SRVM_voidOn(u8 Copy_u8Angle)
{
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
	/* TMR1 init at pwm mode 14 */
//MODE14
CLEAR_BIT(TCCR1A,WGM10);
 42a:	9f b5       	in	r25, 0x2f	; 47
 42c:	9e 7f       	andi	r25, 0xFE	; 254
 42e:	9f bd       	out	0x2f, r25	; 47
SET_BIT (TCCR1A,WGM11);
 430:	9f b5       	in	r25, 0x2f	; 47
 432:	92 60       	ori	r25, 0x02	; 2
 434:	9f bd       	out	0x2f, r25	; 47
SET_BIT (TCCR1B,WGM12);
 436:	9e b5       	in	r25, 0x2e	; 46
 438:	98 60       	ori	r25, 0x08	; 8
 43a:	9e bd       	out	0x2e, r25	; 46
SET_BIT (TCCR1B,WGM13);
 43c:	9e b5       	in	r25, 0x2e	; 46
 43e:	90 61       	ori	r25, 0x10	; 16
 440:	9e bd       	out	0x2e, r25	; 46
//NON INVERTING MODE 14
CLEAR_BIT(TCCR1A,COM1A0);
 442:	9f b5       	in	r25, 0x2f	; 47
 444:	9f 7b       	andi	r25, 0xBF	; 191
 446:	9f bd       	out	0x2f, r25	; 47
SET_BIT (TCCR1A,COM1A1);
 448:	9f b5       	in	r25, 0x2f	; 47
 44a:	90 68       	ori	r25, 0x80	; 128
 44c:	9f bd       	out	0x2f, r25	; 47


	/* Set pwm fre. = 50 */
        //ICR
        ICR1_u16 = 4999;
 44e:	27 e8       	ldi	r18, 0x87	; 135
 450:	33 e1       	ldi	r19, 0x13	; 19
 452:	37 bd       	out	0x27, r19	; 39
 454:	26 bd       	out	0x26, r18	; 38
		
	/* Set pwm duty cycle between 5 : 10
	 depend on desired angle[0 : 180] */
	
		f32 Duty_Cycle = 5.0 +  (Copy_u8Angle * 5.0 / 180.0); // if angle -90-->0-->90
 456:	68 2f       	mov	r22, r24
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 93 05 	call	0xb26	; 0xb26 <__floatsisf>
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	40 ea       	ldi	r20, 0xA0	; 160
 468:	50 e4       	ldi	r21, 0x40	; 64
 46a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__mulsf3>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	44 e3       	ldi	r20, 0x34	; 52
 474:	53 e4       	ldi	r21, 0x43	; 67
 476:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__divsf3>
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	40 ea       	ldi	r20, 0xA0	; 160
 480:	50 e4       	ldi	r21, 0x40	; 64
 482:	0e 94 84 04 	call	0x908	; 0x908 <__addsf3>

		OCR1A_u16 = ( (Duty_Cycle/100.0) * (ICR1_u16+1)) - 1;
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	48 ec       	ldi	r20, 0xC8	; 200
 48c:	52 e4       	ldi	r21, 0x42	; 66
 48e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__divsf3>
 492:	6b 01       	movw	r12, r22
 494:	7c 01       	movw	r14, r24
 496:	66 b5       	in	r22, 0x26	; 38
 498:	77 b5       	in	r23, 0x27	; 39
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 91 05 	call	0xb22	; 0xb22 <__floatunsisf>
 4a6:	a7 01       	movw	r20, r14
 4a8:	96 01       	movw	r18, r12
 4aa:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__mulsf3>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	40 e8       	ldi	r20, 0x80	; 128
 4b4:	5f e3       	ldi	r21, 0x3F	; 63
 4b6:	0e 94 83 04 	call	0x906	; 0x906 <__subsf3>
 4ba:	0e 94 62 05 	call	0xac4	; 0xac4 <__fixunssfsi>
 4be:	7b bd       	out	0x2b, r23	; 43
 4c0:	6a bd       	out	0x2a, r22	; 42
	
	

	/* TMR1 start */
	TMR1_voidStart();
 4c2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TMR1_voidStart>
}
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	df 90       	pop	r13
 4cc:	cf 90       	pop	r12
 4ce:	08 95       	ret

000004d0 <main>:
#include "ServoM_Interface.h"

#define F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <main+0x6>
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <main+0x8>
 4d8:	00 d0       	rcall	.+0      	; 0x4da <main+0xa>
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
    DIO_init();
 4de:	0e 94 3b 03 	call	0x676	; 0x676 <DIO_init>
    TMR1_voidInit();
 4e2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <TMR1_voidInit>
    LCD_init();
 4e6:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_init>
    KEY_VoidInit();
 4ea:	0e 94 41 00 	call	0x82	; 0x82 <KEY_VoidInit>
    u8 Predefined_Pass[6] = "12345";
 4ee:	86 e0       	ldi	r24, 0x06	; 6
 4f0:	ef ea       	ldi	r30, 0xAF	; 175
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	de 01       	movw	r26, r28
 4f6:	11 96       	adiw	r26, 0x01	; 1
 4f8:	01 90       	ld	r0, Z+
 4fa:	0d 92       	st	X+, r0
 4fc:	8a 95       	dec	r24
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x28>
    u8 counter = 0;
    u8 Iterator = 0;
    u8 correctCount = 0;
    u8 falsecount = 0;
    u8 PASS = 0;
    LCD_Clear();
 500:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Clear>
	LCD_GoTo(0,3);
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_GoTo>
	LCD_WriteString("Enter Password");
 50c:	88 e7       	ldi	r24, 0x78	; 120
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 04 02 	call	0x408	; 0x408 <LCD_WriteString>
 514:	2f ef       	ldi	r18, 0xFF	; 255
 516:	8d e3       	ldi	r24, 0x3D	; 61
 518:	99 e4       	ldi	r25, 0x49	; 73
 51a:	21 50       	subi	r18, 0x01	; 1
 51c:	80 40       	sbci	r24, 0x00	; 0
 51e:	90 40       	sbci	r25, 0x00	; 0
 520:	e1 f7       	brne	.-8      	; 0x51a <main+0x4a>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x54>
 524:	00 00       	nop
	_delay_ms(1500);
	    LCD_Clear();
 526:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Clear>
#include "ServoM_Interface.h"

#define F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
 52a:	d1 2c       	mov	r13, r1
 52c:	f1 2c       	mov	r15, r1
 52e:	e1 2c       	mov	r14, r1
 530:	10 e0       	ldi	r17, 0x00	; 0

    while (1)
    {


        if (Iterator < 5)
 532:	15 30       	cpi	r17, 0x05	; 5
 534:	00 f5       	brcc	.+64     	; 0x576 <main+0xa6>
        {
            if (Key_U8PressedKey() != KEYPAD_NOT_PRESSED)
 536:	0e 94 92 00 	call	0x124	; 0x124 <Key_U8PressedKey>
 53a:	8f 3f       	cpi	r24, 0xFF	; 255
 53c:	e1 f0       	breq	.+56     	; 0x576 <main+0xa6>
            {
                PASS = Key_U8PressedKey();
 53e:	0e 94 92 00 	call	0x124	; 0x124 <Key_U8PressedKey>
 542:	08 2f       	mov	r16, r24
 544:	2f ef       	ldi	r18, 0xFF	; 255
 546:	86 e1       	ldi	r24, 0x16	; 22
 548:	91 e1       	ldi	r25, 0x11	; 17
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	90 40       	sbci	r25, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <main+0x7a>
 552:	00 c0       	rjmp	.+0      	; 0x554 <main+0x84>
 554:	00 00       	nop
                _delay_ms(350);
                LCD_Write_CHAR(PASS);
 556:	80 2f       	mov	r24, r16
 558:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_Write_CHAR>
                pass_array[Iterator] = PASS;

                if (Predefined_Pass[Iterator] == pass_array[Iterator])
 55c:	e1 e0       	ldi	r30, 0x01	; 1
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	ec 0f       	add	r30, r28
 562:	fd 1f       	adc	r31, r29
 564:	e1 0f       	add	r30, r17
 566:	f1 1d       	adc	r31, r1
 568:	80 81       	ld	r24, Z
 56a:	08 13       	cpse	r16, r24
 56c:	02 c0       	rjmp	.+4      	; 0x572 <main+0xa2>
                {
                    correctCount++;
 56e:	e3 94       	inc	r14
 570:	01 c0       	rjmp	.+2      	; 0x574 <main+0xa4>
                }
                else
                {
                    falsecount++;
 572:	f3 94       	inc	r15
                }

                Iterator++;
 574:	1f 5f       	subi	r17, 0xFF	; 255
            }
        }

        if (Iterator == 5)
 576:	15 30       	cpi	r17, 0x05	; 5
 578:	e1 f6       	brne	.-72     	; 0x532 <main+0x62>
 57a:	2f ef       	ldi	r18, 0xFF	; 255
 57c:	83 ed       	ldi	r24, 0xD3	; 211
 57e:	90 e3       	ldi	r25, 0x30	; 48
 580:	21 50       	subi	r18, 0x01	; 1
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <main+0xb0>
 588:	00 c0       	rjmp	.+0      	; 0x58a <main+0xba>
 58a:	00 00       	nop
        {
            _delay_ms(1000);
            pass_array[5] = '\0';

            if (falsecount > 0)
 58c:	ff 20       	and	r15, r15
 58e:	f1 f0       	breq	.+60     	; 0x5cc <main+0xfc>
            {
                LCD_Clear();
 590:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Clear>
                LCD_GoTo(1, 3);
 594:	63 e0       	ldi	r22, 0x03	; 3
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_GoTo>
                LCD_WriteString("WRONG PASSWORD");
 59c:	87 e8       	ldi	r24, 0x87	; 135
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 04 02 	call	0x408	; 0x408 <LCD_WriteString>
                LCD_GoTo(2, 3);
 5a4:	63 e0       	ldi	r22, 0x03	; 3
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_GoTo>
                LCD_WriteString("TRY again");
 5ac:	86 e9       	ldi	r24, 0x96	; 150
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 04 02 	call	0x408	; 0x408 <LCD_WriteString>
 5b4:	2f ef       	ldi	r18, 0xFF	; 255
 5b6:	83 ed       	ldi	r24, 0xD3	; 211
 5b8:	90 e3       	ldi	r25, 0x30	; 48
 5ba:	21 50       	subi	r18, 0x01	; 1
 5bc:	80 40       	sbci	r24, 0x00	; 0
 5be:	90 40       	sbci	r25, 0x00	; 0
 5c0:	e1 f7       	brne	.-8      	; 0x5ba <main+0xea>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <main+0xf4>
 5c4:	00 00       	nop
                _delay_ms(1000);
                LCD_Clear();
 5c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Clear>
                counter++;
 5ca:	d3 94       	inc	r13
            }

            if (correctCount == 5)
 5cc:	25 e0       	ldi	r18, 0x05	; 5
 5ce:	e2 12       	cpse	r14, r18
 5d0:	27 c0       	rjmp	.+78     	; 0x620 <main+0x150>
            {
				LCD_Clear();
 5d2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Clear>
                LCD_GoTo(1, 3);
 5d6:	63 e0       	ldi	r22, 0x03	; 3
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_GoTo>
                LCD_WriteString("Welcome");
 5de:	80 ea       	ldi	r24, 0xA0	; 160
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 04 02 	call	0x408	; 0x408 <LCD_WriteString>
                DIO_setPinValue(DIO_PORTA, DIO_PIN4, DIO_PIN_HIGH);
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	64 e0       	ldi	r22, 0x04	; 4
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
				TMR1_voidStart();
 5f0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TMR1_voidStart>
				 SRVM_voidOn(180);
 5f4:	84 eb       	ldi	r24, 0xB4	; 180
 5f6:	0e 94 11 02 	call	0x422	; 0x422 <SRVM_voidOn>
 5fa:	8f ef       	ldi	r24, 0xFF	; 255
 5fc:	95 ee       	ldi	r25, 0xE5	; 229
 5fe:	2a ea       	ldi	r18, 0xAA	; 170
 600:	81 50       	subi	r24, 0x01	; 1
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	20 40       	sbci	r18, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <main+0x130>
 608:	00 c0       	rjmp	.+0      	; 0x60a <main+0x13a>
 60a:	00 00       	nop
                _delay_ms(3500);
				SRVM_voidOn(90);
 60c:	8a e5       	ldi	r24, 0x5A	; 90
 60e:	0e 94 11 02 	call	0x422	; 0x422 <SRVM_voidOn>
                LCD_Clear();
 612:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Clear>
				 DIO_setPinValue(DIO_PORTA, DIO_PIN4, DIO_PIN_LOW);
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	64 e0       	ldi	r22, 0x04	; 4
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
            }
            if (counter == 3)
 620:	83 e0       	ldi	r24, 0x03	; 3
 622:	d8 12       	cpse	r13, r24
 624:	83 cf       	rjmp	.-250    	; 0x52c <main+0x5c>
                {
                    DIO_setPinValue(DIO_PORTB, DIO_PIN7, DIO_PIN_HIGH);
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	67 e0       	ldi	r22, 0x07	; 7
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
                    DIO_setPinValue(DIO_PORTC, DIO_PIN6, DIO_PIN_HIGH);
 630:	41 e0       	ldi	r20, 0x01	; 1
 632:	66 e0       	ldi	r22, 0x06	; 6
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
                    LCD_GoTo(1, 3);
 63a:	63 e0       	ldi	r22, 0x03	; 3
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_GoTo>
                    LCD_WriteString("FAILED");
 642:	88 ea       	ldi	r24, 0xA8	; 168
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 04 02 	call	0x408	; 0x408 <LCD_WriteString>
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	25 ee       	ldi	r18, 0xE5	; 229
 64e:	8a ea       	ldi	r24, 0xAA	; 170
 650:	91 50       	subi	r25, 0x01	; 1
 652:	20 40       	sbci	r18, 0x00	; 0
 654:	80 40       	sbci	r24, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <main+0x180>
 658:	00 c0       	rjmp	.+0      	; 0x65a <main+0x18a>
 65a:	00 00       	nop
                    _delay_ms(3500);
					DIO_setPinValue(DIO_PORTB, DIO_PIN7, DIO_PIN_LOW);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	67 e0       	ldi	r22, 0x07	; 7
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
					DIO_setPinValue(DIO_PORTC, DIO_PIN6, DIO_PIN_LOW);
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	66 e0       	ldi	r22, 0x06	; 6
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_setPinValue>
                    LCD_Clear();
 670:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Clear>
 674:	5a cf       	rjmp	.-332    	; 0x52a <main+0x5a>

00000676 <DIO_init>:
#include "DIO_Private.h"

void DIO_init(void)
{
	/*Set Initial Directions FOR Pins */
	DDRA = CONC(DIO_PA7_INITIAL_DIRECTION,DIO_PA6_INITIAL_DIRECTION,DIO_PA5_INITIAL_DIRECTION,DIO_PA4_INITIAL_DIRECTION,
 676:	8d ef       	ldi	r24, 0xFD	; 253
 678:	8a bb       	out	0x1a, r24	; 26
	DIO_PA3_INITIAL_DIRECTION,DIO_PA2_INITIAL_DIRECTION,DIO_PA1_INITIAL_DIRECTION,DIO_PA0_INITIAL_DIRECTION);
	
	DDRB = CONC(DIO_PB7_INITIAL_DIRECTION,DIO_PB6_INITIAL_DIRECTION,DIO_PB5_INITIAL_DIRECTION,DIO_PB4_INITIAL_DIRECTION,
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	87 bb       	out	0x17, r24	; 23
	DIO_PB3_INITIAL_DIRECTION,DIO_PB2_INITIAL_DIRECTION,DIO_PB1_INITIAL_DIRECTION,DIO_PB0_INITIAL_DIRECTION);
	
	DDRC = CONC(DIO_PC7_INITIAL_DIRECTION,DIO_PC6_INITIAL_DIRECTION,DIO_PC5_INITIAL_DIRECTION,DIO_PC4_INITIAL_DIRECTION,
 67e:	8d e7       	ldi	r24, 0x7D	; 125
 680:	84 bb       	out	0x14, r24	; 20
	DIO_PC3_INITIAL_DIRECTION,DIO_PC2_INITIAL_DIRECTION,DIO_PC1_INITIAL_DIRECTION,DIO_PC0_INITIAL_DIRECTION);
	
	DDRD = CONC(DIO_PD7_INITIAL_DIRECTION,DIO_PD6_INITIAL_DIRECTION,DIO_PD5_INITIAL_DIRECTION,DIO_PD4_INITIAL_DIRECTION,
 682:	81 e2       	ldi	r24, 0x21	; 33
 684:	81 bb       	out	0x11, r24	; 17
	DIO_PD3_INITIAL_DIRECTION,DIO_PD2_INITIAL_DIRECTION,DIO_PD1_INITIAL_DIRECTION,DIO_PD0_INITIAL_DIRECTION);
	
	/*Set Initial Values FOR Pins */
	PORTA = CONC(DIO_PA7_INITIAL_VALUE,DIO_PA6_INITIAL_VALUE,DIO_PA5_INITIAL_VALUE,DIO_PA4_INITIAL_VALUE,
 686:	1b ba       	out	0x1b, r1	; 27
	DIO_PA3_INITIAL_VALUE,DIO_PA2_INITIAL_VALUE,DIO_PA1_INITIAL_VALUE,DIO_PA0_INITIAL_VALUE);
	
	PORTB = CONC(DIO_PB7_INITIAL_VALUE,DIO_PB6_INITIAL_VALUE,DIO_PB5_INITIAL_VALUE,DIO_PB4_INITIAL_VALUE,
 688:	88 e0       	ldi	r24, 0x08	; 8
 68a:	88 bb       	out	0x18, r24	; 24
	DIO_PB3_INITIAL_VALUE,DIO_PB2_INITIAL_VALUE,DIO_PB1_INITIAL_VALUE,DIO_PB0_INITIAL_VALUE);
	
	PORTC = CONC(DIO_PC7_INITIAL_VALUE,DIO_PC6_INITIAL_VALUE,DIO_PC5_INITIAL_VALUE,DIO_PC4_INITIAL_VALUE,
 68c:	8c e3       	ldi	r24, 0x3C	; 60
 68e:	85 bb       	out	0x15, r24	; 21
	DIO_PC3_INITIAL_VALUE,DIO_PC2_INITIAL_VALUE,DIO_PC1_INITIAL_VALUE,DIO_PC0_INITIAL_VALUE);
	
	PORTD = CONC(DIO_PD7_INITIAL_VALUE,DIO_PD6_INITIAL_VALUE,DIO_PD5_INITIAL_VALUE,DIO_PD4_INITIAL_VALUE,
 690:	88 ed       	ldi	r24, 0xD8	; 216
 692:	82 bb       	out	0x12, r24	; 18
 694:	08 95       	ret

00000696 <DIO_setPinDirection>:
	DIO_PD3_INITIAL_VALUE,DIO_PD2_INITIAL_VALUE,DIO_PD1_INITIAL_VALUE,DIO_PD0_INITIAL_VALUE);
}

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3)&&(PinId<=7)&&((DIO_PIN_OUTPUT==PinDirection)||(DIO_PIN_INPUT==PinDirection)))
 696:	84 30       	cpi	r24, 0x04	; 4
 698:	08 f0       	brcs	.+2      	; 0x69c <DIO_setPinDirection+0x6>
 69a:	72 c0       	rjmp	.+228    	; 0x780 <DIO_setPinDirection+0xea>
 69c:	68 30       	cpi	r22, 0x08	; 8
 69e:	08 f0       	brcs	.+2      	; 0x6a2 <DIO_setPinDirection+0xc>
 6a0:	6f c0       	rjmp	.+222    	; 0x780 <DIO_setPinDirection+0xea>
 6a2:	42 30       	cpi	r20, 0x02	; 2
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <DIO_setPinDirection+0x12>
 6a6:	6c c0       	rjmp	.+216    	; 0x780 <DIO_setPinDirection+0xea>
	{
		switch(PortId)
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	01 f1       	breq	.+64     	; 0x6ec <DIO_setPinDirection+0x56>
 6ac:	30 f0       	brcs	.+12     	; 0x6ba <DIO_setPinDirection+0x24>
 6ae:	82 30       	cpi	r24, 0x02	; 2
 6b0:	b1 f1       	breq	.+108    	; 0x71e <DIO_setPinDirection+0x88>
 6b2:	83 30       	cpi	r24, 0x03	; 3
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <DIO_setPinDirection+0x22>
 6b6:	4c c0       	rjmp	.+152    	; 0x750 <DIO_setPinDirection+0xba>
 6b8:	08 95       	ret
		{
			case DIO_PORTA:
			if(DIO_PIN_OUTPUT == PinDirection)
 6ba:	41 30       	cpi	r20, 0x01	; 1
 6bc:	59 f4       	brne	.+22     	; 0x6d4 <DIO_setPinDirection+0x3e>
			{
				SET_BIT(DDRA,PinId);
 6be:	2a b3       	in	r18, 0x1a	; 26
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_setPinDirection+0x34>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_setPinDirection+0x30>
 6ce:	82 2b       	or	r24, r18
 6d0:	8a bb       	out	0x1a, r24	; 26
 6d2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,PinId);
 6d4:	2a b3       	in	r18, 0x1a	; 26
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_setPinDirection+0x4a>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	6a 95       	dec	r22
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_setPinDirection+0x46>
 6e4:	80 95       	com	r24
 6e6:	82 23       	and	r24, r18
 6e8:	8a bb       	out	0x1a, r24	; 26
 6ea:	08 95       	ret
			}
			break;

			case DIO_PORTB:
			if(DIO_PIN_OUTPUT == PinDirection)
 6ec:	41 30       	cpi	r20, 0x01	; 1
 6ee:	59 f4       	brne	.+22     	; 0x706 <DIO_setPinDirection+0x70>
			{
				SET_BIT(DDRB,PinId);
 6f0:	27 b3       	in	r18, 0x17	; 23
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_setPinDirection+0x66>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	6a 95       	dec	r22
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_setPinDirection+0x62>
 700:	82 2b       	or	r24, r18
 702:	87 bb       	out	0x17, r24	; 23
 704:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,PinId);
 706:	27 b3       	in	r18, 0x17	; 23
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_setPinDirection+0x7c>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	6a 95       	dec	r22
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_setPinDirection+0x78>
 716:	80 95       	com	r24
 718:	82 23       	and	r24, r18
 71a:	87 bb       	out	0x17, r24	; 23
 71c:	08 95       	ret
			}
			break;

			case DIO_PORTC:
			if(DIO_PIN_OUTPUT == PinDirection)
 71e:	41 30       	cpi	r20, 0x01	; 1
 720:	59 f4       	brne	.+22     	; 0x738 <DIO_setPinDirection+0xa2>
			{
				SET_BIT(DDRC,PinId);
 722:	24 b3       	in	r18, 0x14	; 20
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_setPinDirection+0x98>
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	6a 95       	dec	r22
 730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_setPinDirection+0x94>
 732:	82 2b       	or	r24, r18
 734:	84 bb       	out	0x14, r24	; 20
 736:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,PinId);
 738:	24 b3       	in	r18, 0x14	; 20
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_setPinDirection+0xae>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	6a 95       	dec	r22
 746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_setPinDirection+0xaa>
 748:	80 95       	com	r24
 74a:	82 23       	and	r24, r18
 74c:	84 bb       	out	0x14, r24	; 20
 74e:	08 95       	ret
			}
			break;

			case DIO_PORTD:
			if(DIO_PIN_OUTPUT == PinDirection)
 750:	41 30       	cpi	r20, 0x01	; 1
 752:	59 f4       	brne	.+22     	; 0x76a <DIO_setPinDirection+0xd4>
			{
				SET_BIT(DDRD,PinId);
 754:	21 b3       	in	r18, 0x11	; 17
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_setPinDirection+0xca>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	6a 95       	dec	r22
 762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_setPinDirection+0xc6>
 764:	82 2b       	or	r24, r18
 766:	81 bb       	out	0x11, r24	; 17
 768:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,PinId);
 76a:	21 b3       	in	r18, 0x11	; 17
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_setPinDirection+0xe0>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	6a 95       	dec	r22
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_setPinDirection+0xdc>
 77a:	80 95       	com	r24
 77c:	82 23       	and	r24, r18
 77e:	81 bb       	out	0x11, r24	; 17
 780:	08 95       	ret

00000782 <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	switch(PortId)
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	01 f1       	breq	.+64     	; 0x7c6 <DIO_setPinValue+0x44>
 786:	30 f0       	brcs	.+12     	; 0x794 <DIO_setPinValue+0x12>
 788:	82 30       	cpi	r24, 0x02	; 2
 78a:	b1 f1       	breq	.+108    	; 0x7f8 <DIO_setPinValue+0x76>
 78c:	83 30       	cpi	r24, 0x03	; 3
 78e:	09 f4       	brne	.+2      	; 0x792 <DIO_setPinValue+0x10>
 790:	4c c0       	rjmp	.+152    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 792:	08 95       	ret
	{
		case DIO_PORTA:
		if(DIO_PIN_HIGH == PinValue)
 794:	41 30       	cpi	r20, 0x01	; 1
 796:	59 f4       	brne	.+22     	; 0x7ae <DIO_setPinValue+0x2c>
		{
			SET_BIT(PORTA,PinId);
 798:	2b b3       	in	r18, 0x1b	; 27
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <DIO_setPinValue+0x22>
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	6a 95       	dec	r22
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <DIO_setPinValue+0x1e>
 7a8:	82 2b       	or	r24, r18
 7aa:	8b bb       	out	0x1b, r24	; 27
 7ac:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,PinId);
 7ae:	2b b3       	in	r18, 0x1b	; 27
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_setPinValue+0x38>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	6a 95       	dec	r22
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_setPinValue+0x34>
 7be:	80 95       	com	r24
 7c0:	82 23       	and	r24, r18
 7c2:	8b bb       	out	0x1b, r24	; 27
 7c4:	08 95       	ret
		}
		break;

		case DIO_PORTB:
		if(DIO_PIN_HIGH == PinValue)
 7c6:	41 30       	cpi	r20, 0x01	; 1
 7c8:	59 f4       	brne	.+22     	; 0x7e0 <DIO_setPinValue+0x5e>
		{
			SET_BIT(PORTB,PinId);
 7ca:	28 b3       	in	r18, 0x18	; 24
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_setPinValue+0x54>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_setPinValue+0x50>
 7da:	82 2b       	or	r24, r18
 7dc:	88 bb       	out	0x18, r24	; 24
 7de:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,PinId);
 7e0:	28 b3       	in	r18, 0x18	; 24
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_setPinValue+0x6a>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	6a 95       	dec	r22
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_setPinValue+0x66>
 7f0:	80 95       	com	r24
 7f2:	82 23       	and	r24, r18
 7f4:	88 bb       	out	0x18, r24	; 24
 7f6:	08 95       	ret
		}
		break;

		case DIO_PORTC:
		if(DIO_PIN_HIGH == PinValue)
 7f8:	41 30       	cpi	r20, 0x01	; 1
 7fa:	59 f4       	brne	.+22     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		{
			SET_BIT(PORTC,PinId);
 7fc:	25 b3       	in	r18, 0x15	; 21
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	6a 95       	dec	r22
 80a:	e2 f7       	brpl	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 80c:	82 2b       	or	r24, r18
 80e:	85 bb       	out	0x15, r24	; 21
 810:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,PinId);
 812:	25 b3       	in	r18, 0x15	; 21
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	6a 95       	dec	r22
 820:	e2 f7       	brpl	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 822:	80 95       	com	r24
 824:	82 23       	and	r24, r18
 826:	85 bb       	out	0x15, r24	; 21
 828:	08 95       	ret
		}
		break;

		case DIO_PORTD:
		if(DIO_PIN_HIGH == PinValue)
 82a:	41 30       	cpi	r20, 0x01	; 1
 82c:	59 f4       	brne	.+22     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		{
			SET_BIT(PORTD,PinId);
 82e:	22 b3       	in	r18, 0x12	; 18
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	6a 95       	dec	r22
 83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 83e:	82 2b       	or	r24, r18
 840:	82 bb       	out	0x12, r24	; 18
 842:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,PinId);
 844:	22 b3       	in	r18, 0x12	; 18
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	6a 95       	dec	r22
 852:	e2 f7       	brpl	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 854:	80 95       	com	r24
 856:	82 23       	and	r24, r18
 858:	82 bb       	out	0x12, r24	; 18
 85a:	08 95       	ret

0000085c <DIO_getPinValue>:
}


void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
	switch(PortId)
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	89 f0       	breq	.+34     	; 0x882 <__stack+0x23>
 860:	28 f0       	brcs	.+10     	; 0x86c <__stack+0xd>
 862:	82 30       	cpi	r24, 0x02	; 2
 864:	c9 f0       	breq	.+50     	; 0x898 <__stack+0x39>
 866:	83 30       	cpi	r24, 0x03	; 3
 868:	11 f1       	breq	.+68     	; 0x8ae <__stack+0x4f>
 86a:	08 95       	ret
	{
		case DIO_PORTA:
		*PinValue = GET_BIT(PINA,PinId);
 86c:	89 b3       	in	r24, 0x19	; 25
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
 872:	95 95       	asr	r25
 874:	87 95       	ror	r24
 876:	6a 95       	dec	r22
 878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
 87a:	81 70       	andi	r24, 0x01	; 1
 87c:	fa 01       	movw	r30, r20
 87e:	80 83       	st	Z, r24
		break;
 880:	08 95       	ret

		case DIO_PORTB:
		*PinValue = GET_BIT(PINB,PinId);
 882:	86 b3       	in	r24, 0x16	; 22
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	95 95       	asr	r25
 88a:	87 95       	ror	r24
 88c:	6a 95       	dec	r22
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	81 70       	andi	r24, 0x01	; 1
 892:	fa 01       	movw	r30, r20
 894:	80 83       	st	Z, r24
		break;
 896:	08 95       	ret

		case DIO_PORTC:
		*PinValue = GET_BIT(PINC,PinId);
 898:	83 b3       	in	r24, 0x13	; 19
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
 89e:	95 95       	asr	r25
 8a0:	87 95       	ror	r24
 8a2:	6a 95       	dec	r22
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
 8a6:	81 70       	andi	r24, 0x01	; 1
 8a8:	fa 01       	movw	r30, r20
 8aa:	80 83       	st	Z, r24
		break;
 8ac:	08 95       	ret

		case DIO_PORTD:
		*PinValue = GET_BIT(PIND,PinId);
 8ae:	80 b3       	in	r24, 0x10	; 16
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
 8b4:	95 95       	asr	r25
 8b6:	87 95       	ror	r24
 8b8:	6a 95       	dec	r22
 8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
 8bc:	81 70       	andi	r24, 0x01	; 1
 8be:	fa 01       	movw	r30, r20
 8c0:	80 83       	st	Z, r24
 8c2:	08 95       	ret

000008c4 <TMR1_voidInit>:
#include "TMR1_Private.h"


void TMR1_voidInit(void)
{  //MODE14
	CLEAR_BIT(TCCR1A,WGM10);
 8c4:	8f b5       	in	r24, 0x2f	; 47
 8c6:	8e 7f       	andi	r24, 0xFE	; 254
 8c8:	8f bd       	out	0x2f, r24	; 47
	SET_BIT (TCCR1A,WGM11);
 8ca:	8f b5       	in	r24, 0x2f	; 47
 8cc:	82 60       	ori	r24, 0x02	; 2
 8ce:	8f bd       	out	0x2f, r24	; 47
	SET_BIT (TCCR1B,WGM12);
 8d0:	8e b5       	in	r24, 0x2e	; 46
 8d2:	88 60       	ori	r24, 0x08	; 8
 8d4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT (TCCR1B,WGM13);
 8d6:	8e b5       	in	r24, 0x2e	; 46
 8d8:	80 61       	ori	r24, 0x10	; 16
 8da:	8e bd       	out	0x2e, r24	; 46
	//NON INVERTING MODE 14
	CLEAR_BIT(TCCR1A,COM1A0);
 8dc:	8f b5       	in	r24, 0x2f	; 47
 8de:	8f 7b       	andi	r24, 0xBF	; 191
 8e0:	8f bd       	out	0x2f, r24	; 47
	SET_BIT (TCCR1A,COM1A1);
 8e2:	8f b5       	in	r24, 0x2f	; 47
 8e4:	80 68       	ori	r24, 0x80	; 128
 8e6:	8f bd       	out	0x2f, r24	; 47
	
	//ICR
	ICR1_u16 = 4999;
 8e8:	87 e8       	ldi	r24, 0x87	; 135
 8ea:	93 e1       	ldi	r25, 0x13	; 19
 8ec:	97 bd       	out	0x27, r25	; 39
 8ee:	86 bd       	out	0x26, r24	; 38
 8f0:	08 95       	ret

000008f2 <TMR1_voidStart>:
	
}

void TMR1_voidStart(void)
{
	SET_BIT (TCCR1B,CS10);
 8f2:	8e b5       	in	r24, 0x2e	; 46
 8f4:	81 60       	ori	r24, 0x01	; 1
 8f6:	8e bd       	out	0x2e, r24	; 46
	SET_BIT (TCCR1B,CS11);
 8f8:	8e b5       	in	r24, 0x2e	; 46
 8fa:	82 60       	ori	r24, 0x02	; 2
 8fc:	8e bd       	out	0x2e, r24	; 46
	SET_BIT (TCCR1B,CS12);
 8fe:	8e b5       	in	r24, 0x2e	; 46
 900:	84 60       	ori	r24, 0x04	; 4
 902:	8e bd       	out	0x2e, r24	; 46
 904:	08 95       	ret

00000906 <__subsf3>:
 906:	50 58       	subi	r21, 0x80	; 128

00000908 <__addsf3>:
 908:	bb 27       	eor	r27, r27
 90a:	aa 27       	eor	r26, r26
 90c:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3x>
 910:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_round>
 914:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscA>
 918:	38 f0       	brcs	.+14     	; 0x928 <__addsf3+0x20>
 91a:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_pscB>
 91e:	20 f0       	brcs	.+8      	; 0x928 <__addsf3+0x20>
 920:	39 f4       	brne	.+14     	; 0x930 <__addsf3+0x28>
 922:	9f 3f       	cpi	r25, 0xFF	; 255
 924:	19 f4       	brne	.+6      	; 0x92c <__addsf3+0x24>
 926:	26 f4       	brtc	.+8      	; 0x930 <__addsf3+0x28>
 928:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_nan>
 92c:	0e f4       	brtc	.+2      	; 0x930 <__addsf3+0x28>
 92e:	e0 95       	com	r30
 930:	e7 fb       	bst	r30, 7
 932:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_inf>

00000936 <__addsf3x>:
 936:	e9 2f       	mov	r30, r25
 938:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_split3>
 93c:	58 f3       	brcs	.-42     	; 0x914 <__addsf3+0xc>
 93e:	ba 17       	cp	r27, r26
 940:	62 07       	cpc	r22, r18
 942:	73 07       	cpc	r23, r19
 944:	84 07       	cpc	r24, r20
 946:	95 07       	cpc	r25, r21
 948:	20 f0       	brcs	.+8      	; 0x952 <__addsf3x+0x1c>
 94a:	79 f4       	brne	.+30     	; 0x96a <__addsf3x+0x34>
 94c:	a6 f5       	brtc	.+104    	; 0x9b6 <__addsf3x+0x80>
 94e:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_zero>
 952:	0e f4       	brtc	.+2      	; 0x956 <__addsf3x+0x20>
 954:	e0 95       	com	r30
 956:	0b 2e       	mov	r0, r27
 958:	ba 2f       	mov	r27, r26
 95a:	a0 2d       	mov	r26, r0
 95c:	0b 01       	movw	r0, r22
 95e:	b9 01       	movw	r22, r18
 960:	90 01       	movw	r18, r0
 962:	0c 01       	movw	r0, r24
 964:	ca 01       	movw	r24, r20
 966:	a0 01       	movw	r20, r0
 968:	11 24       	eor	r1, r1
 96a:	ff 27       	eor	r31, r31
 96c:	59 1b       	sub	r21, r25
 96e:	99 f0       	breq	.+38     	; 0x996 <__addsf3x+0x60>
 970:	59 3f       	cpi	r21, 0xF9	; 249
 972:	50 f4       	brcc	.+20     	; 0x988 <__addsf3x+0x52>
 974:	50 3e       	cpi	r21, 0xE0	; 224
 976:	68 f1       	brcs	.+90     	; 0x9d2 <__addsf3x+0x9c>
 978:	1a 16       	cp	r1, r26
 97a:	f0 40       	sbci	r31, 0x00	; 0
 97c:	a2 2f       	mov	r26, r18
 97e:	23 2f       	mov	r18, r19
 980:	34 2f       	mov	r19, r20
 982:	44 27       	eor	r20, r20
 984:	58 5f       	subi	r21, 0xF8	; 248
 986:	f3 cf       	rjmp	.-26     	; 0x96e <__addsf3x+0x38>
 988:	46 95       	lsr	r20
 98a:	37 95       	ror	r19
 98c:	27 95       	ror	r18
 98e:	a7 95       	ror	r26
 990:	f0 40       	sbci	r31, 0x00	; 0
 992:	53 95       	inc	r21
 994:	c9 f7       	brne	.-14     	; 0x988 <__addsf3x+0x52>
 996:	7e f4       	brtc	.+30     	; 0x9b6 <__addsf3x+0x80>
 998:	1f 16       	cp	r1, r31
 99a:	ba 0b       	sbc	r27, r26
 99c:	62 0b       	sbc	r22, r18
 99e:	73 0b       	sbc	r23, r19
 9a0:	84 0b       	sbc	r24, r20
 9a2:	ba f0       	brmi	.+46     	; 0x9d2 <__addsf3x+0x9c>
 9a4:	91 50       	subi	r25, 0x01	; 1
 9a6:	a1 f0       	breq	.+40     	; 0x9d0 <__addsf3x+0x9a>
 9a8:	ff 0f       	add	r31, r31
 9aa:	bb 1f       	adc	r27, r27
 9ac:	66 1f       	adc	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	c2 f7       	brpl	.-16     	; 0x9a4 <__addsf3x+0x6e>
 9b4:	0e c0       	rjmp	.+28     	; 0x9d2 <__addsf3x+0x9c>
 9b6:	ba 0f       	add	r27, r26
 9b8:	62 1f       	adc	r22, r18
 9ba:	73 1f       	adc	r23, r19
 9bc:	84 1f       	adc	r24, r20
 9be:	48 f4       	brcc	.+18     	; 0x9d2 <__addsf3x+0x9c>
 9c0:	87 95       	ror	r24
 9c2:	77 95       	ror	r23
 9c4:	67 95       	ror	r22
 9c6:	b7 95       	ror	r27
 9c8:	f7 95       	ror	r31
 9ca:	9e 3f       	cpi	r25, 0xFE	; 254
 9cc:	08 f0       	brcs	.+2      	; 0x9d0 <__addsf3x+0x9a>
 9ce:	b0 cf       	rjmp	.-160    	; 0x930 <__addsf3+0x28>
 9d0:	93 95       	inc	r25
 9d2:	88 0f       	add	r24, r24
 9d4:	08 f0       	brcs	.+2      	; 0x9d8 <__addsf3x+0xa2>
 9d6:	99 27       	eor	r25, r25
 9d8:	ee 0f       	add	r30, r30
 9da:	97 95       	ror	r25
 9dc:	87 95       	ror	r24
 9de:	08 95       	ret

000009e0 <__divsf3>:
 9e0:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3x>
 9e4:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_round>
 9e8:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_pscB>
 9ec:	58 f0       	brcs	.+22     	; 0xa04 <__divsf3+0x24>
 9ee:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscA>
 9f2:	40 f0       	brcs	.+16     	; 0xa04 <__divsf3+0x24>
 9f4:	29 f4       	brne	.+10     	; 0xa00 <__divsf3+0x20>
 9f6:	5f 3f       	cpi	r21, 0xFF	; 255
 9f8:	29 f0       	breq	.+10     	; 0xa04 <__divsf3+0x24>
 9fa:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_inf>
 9fe:	51 11       	cpse	r21, r1
 a00:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_szero>
 a04:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_nan>

00000a08 <__divsf3x>:
 a08:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_split3>
 a0c:	68 f3       	brcs	.-38     	; 0x9e8 <__divsf3+0x8>

00000a0e <__divsf3_pse>:
 a0e:	99 23       	and	r25, r25
 a10:	b1 f3       	breq	.-20     	; 0x9fe <__divsf3+0x1e>
 a12:	55 23       	and	r21, r21
 a14:	91 f3       	breq	.-28     	; 0x9fa <__divsf3+0x1a>
 a16:	95 1b       	sub	r25, r21
 a18:	55 0b       	sbc	r21, r21
 a1a:	bb 27       	eor	r27, r27
 a1c:	aa 27       	eor	r26, r26
 a1e:	62 17       	cp	r22, r18
 a20:	73 07       	cpc	r23, r19
 a22:	84 07       	cpc	r24, r20
 a24:	38 f0       	brcs	.+14     	; 0xa34 <__divsf3_pse+0x26>
 a26:	9f 5f       	subi	r25, 0xFF	; 255
 a28:	5f 4f       	sbci	r21, 0xFF	; 255
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	44 1f       	adc	r20, r20
 a30:	aa 1f       	adc	r26, r26
 a32:	a9 f3       	breq	.-22     	; 0xa1e <__divsf3_pse+0x10>
 a34:	35 d0       	rcall	.+106    	; 0xaa0 <__divsf3_pse+0x92>
 a36:	0e 2e       	mov	r0, r30
 a38:	3a f0       	brmi	.+14     	; 0xa48 <__divsf3_pse+0x3a>
 a3a:	e0 e8       	ldi	r30, 0x80	; 128
 a3c:	32 d0       	rcall	.+100    	; 0xaa2 <__divsf3_pse+0x94>
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	50 40       	sbci	r21, 0x00	; 0
 a42:	e6 95       	lsr	r30
 a44:	00 1c       	adc	r0, r0
 a46:	ca f7       	brpl	.-14     	; 0xa3a <__divsf3_pse+0x2c>
 a48:	2b d0       	rcall	.+86     	; 0xaa0 <__divsf3_pse+0x92>
 a4a:	fe 2f       	mov	r31, r30
 a4c:	29 d0       	rcall	.+82     	; 0xaa0 <__divsf3_pse+0x92>
 a4e:	66 0f       	add	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	bb 1f       	adc	r27, r27
 a56:	26 17       	cp	r18, r22
 a58:	37 07       	cpc	r19, r23
 a5a:	48 07       	cpc	r20, r24
 a5c:	ab 07       	cpc	r26, r27
 a5e:	b0 e8       	ldi	r27, 0x80	; 128
 a60:	09 f0       	breq	.+2      	; 0xa64 <__divsf3_pse+0x56>
 a62:	bb 0b       	sbc	r27, r27
 a64:	80 2d       	mov	r24, r0
 a66:	bf 01       	movw	r22, r30
 a68:	ff 27       	eor	r31, r31
 a6a:	93 58       	subi	r25, 0x83	; 131
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255
 a6e:	3a f0       	brmi	.+14     	; 0xa7e <__divsf3_pse+0x70>
 a70:	9e 3f       	cpi	r25, 0xFE	; 254
 a72:	51 05       	cpc	r21, r1
 a74:	78 f0       	brcs	.+30     	; 0xa94 <__divsf3_pse+0x86>
 a76:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_inf>
 a7a:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_szero>
 a7e:	5f 3f       	cpi	r21, 0xFF	; 255
 a80:	e4 f3       	brlt	.-8      	; 0xa7a <__divsf3_pse+0x6c>
 a82:	98 3e       	cpi	r25, 0xE8	; 232
 a84:	d4 f3       	brlt	.-12     	; 0xa7a <__divsf3_pse+0x6c>
 a86:	86 95       	lsr	r24
 a88:	77 95       	ror	r23
 a8a:	67 95       	ror	r22
 a8c:	b7 95       	ror	r27
 a8e:	f7 95       	ror	r31
 a90:	9f 5f       	subi	r25, 0xFF	; 255
 a92:	c9 f7       	brne	.-14     	; 0xa86 <__divsf3_pse+0x78>
 a94:	88 0f       	add	r24, r24
 a96:	91 1d       	adc	r25, r1
 a98:	96 95       	lsr	r25
 a9a:	87 95       	ror	r24
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret
 aa0:	e1 e0       	ldi	r30, 0x01	; 1
 aa2:	66 0f       	add	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	bb 1f       	adc	r27, r27
 aaa:	62 17       	cp	r22, r18
 aac:	73 07       	cpc	r23, r19
 aae:	84 07       	cpc	r24, r20
 ab0:	ba 07       	cpc	r27, r26
 ab2:	20 f0       	brcs	.+8      	; 0xabc <__divsf3_pse+0xae>
 ab4:	62 1b       	sub	r22, r18
 ab6:	73 0b       	sbc	r23, r19
 ab8:	84 0b       	sbc	r24, r20
 aba:	ba 0b       	sbc	r27, r26
 abc:	ee 1f       	adc	r30, r30
 abe:	88 f7       	brcc	.-30     	; 0xaa2 <__divsf3_pse+0x94>
 ac0:	e0 95       	com	r30
 ac2:	08 95       	ret

00000ac4 <__fixunssfsi>:
 ac4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_splitA>
 ac8:	88 f0       	brcs	.+34     	; 0xaec <__fixunssfsi+0x28>
 aca:	9f 57       	subi	r25, 0x7F	; 127
 acc:	98 f0       	brcs	.+38     	; 0xaf4 <__fixunssfsi+0x30>
 ace:	b9 2f       	mov	r27, r25
 ad0:	99 27       	eor	r25, r25
 ad2:	b7 51       	subi	r27, 0x17	; 23
 ad4:	b0 f0       	brcs	.+44     	; 0xb02 <__fixunssfsi+0x3e>
 ad6:	e1 f0       	breq	.+56     	; 0xb10 <__fixunssfsi+0x4c>
 ad8:	66 0f       	add	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	1a f0       	brmi	.+6      	; 0xae8 <__fixunssfsi+0x24>
 ae2:	ba 95       	dec	r27
 ae4:	c9 f7       	brne	.-14     	; 0xad8 <__fixunssfsi+0x14>
 ae6:	14 c0       	rjmp	.+40     	; 0xb10 <__fixunssfsi+0x4c>
 ae8:	b1 30       	cpi	r27, 0x01	; 1
 aea:	91 f0       	breq	.+36     	; 0xb10 <__fixunssfsi+0x4c>
 aec:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_zero>
 af0:	b1 e0       	ldi	r27, 0x01	; 1
 af2:	08 95       	ret
 af4:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_zero>
 af8:	67 2f       	mov	r22, r23
 afa:	78 2f       	mov	r23, r24
 afc:	88 27       	eor	r24, r24
 afe:	b8 5f       	subi	r27, 0xF8	; 248
 b00:	39 f0       	breq	.+14     	; 0xb10 <__fixunssfsi+0x4c>
 b02:	b9 3f       	cpi	r27, 0xF9	; 249
 b04:	cc f3       	brlt	.-14     	; 0xaf8 <__fixunssfsi+0x34>
 b06:	86 95       	lsr	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b3 95       	inc	r27
 b0e:	d9 f7       	brne	.-10     	; 0xb06 <__fixunssfsi+0x42>
 b10:	3e f4       	brtc	.+14     	; 0xb20 <__fixunssfsi+0x5c>
 b12:	90 95       	com	r25
 b14:	80 95       	com	r24
 b16:	70 95       	com	r23
 b18:	61 95       	neg	r22
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__floatunsisf>:
 b22:	e8 94       	clt
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <__floatsisf+0x12>

00000b26 <__floatsisf>:
 b26:	97 fb       	bst	r25, 7
 b28:	3e f4       	brtc	.+14     	; 0xb38 <__floatsisf+0x12>
 b2a:	90 95       	com	r25
 b2c:	80 95       	com	r24
 b2e:	70 95       	com	r23
 b30:	61 95       	neg	r22
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	99 23       	and	r25, r25
 b3a:	a9 f0       	breq	.+42     	; 0xb66 <__floatsisf+0x40>
 b3c:	f9 2f       	mov	r31, r25
 b3e:	96 e9       	ldi	r25, 0x96	; 150
 b40:	bb 27       	eor	r27, r27
 b42:	93 95       	inc	r25
 b44:	f6 95       	lsr	r31
 b46:	87 95       	ror	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b7 95       	ror	r27
 b4e:	f1 11       	cpse	r31, r1
 b50:	f8 cf       	rjmp	.-16     	; 0xb42 <__floatsisf+0x1c>
 b52:	fa f4       	brpl	.+62     	; 0xb92 <__floatsisf+0x6c>
 b54:	bb 0f       	add	r27, r27
 b56:	11 f4       	brne	.+4      	; 0xb5c <__floatsisf+0x36>
 b58:	60 ff       	sbrs	r22, 0
 b5a:	1b c0       	rjmp	.+54     	; 0xb92 <__floatsisf+0x6c>
 b5c:	6f 5f       	subi	r22, 0xFF	; 255
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	16 c0       	rjmp	.+44     	; 0xb92 <__floatsisf+0x6c>
 b66:	88 23       	and	r24, r24
 b68:	11 f0       	breq	.+4      	; 0xb6e <__floatsisf+0x48>
 b6a:	96 e9       	ldi	r25, 0x96	; 150
 b6c:	11 c0       	rjmp	.+34     	; 0xb90 <__floatsisf+0x6a>
 b6e:	77 23       	and	r23, r23
 b70:	21 f0       	breq	.+8      	; 0xb7a <__floatsisf+0x54>
 b72:	9e e8       	ldi	r25, 0x8E	; 142
 b74:	87 2f       	mov	r24, r23
 b76:	76 2f       	mov	r23, r22
 b78:	05 c0       	rjmp	.+10     	; 0xb84 <__floatsisf+0x5e>
 b7a:	66 23       	and	r22, r22
 b7c:	71 f0       	breq	.+28     	; 0xb9a <__floatsisf+0x74>
 b7e:	96 e8       	ldi	r25, 0x86	; 134
 b80:	86 2f       	mov	r24, r22
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	2a f0       	brmi	.+10     	; 0xb92 <__floatsisf+0x6c>
 b88:	9a 95       	dec	r25
 b8a:	66 0f       	add	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	88 1f       	adc	r24, r24
 b90:	da f7       	brpl	.-10     	; 0xb88 <__floatsisf+0x62>
 b92:	88 0f       	add	r24, r24
 b94:	96 95       	lsr	r25
 b96:	87 95       	ror	r24
 b98:	97 f9       	bld	r25, 7
 b9a:	08 95       	ret

00000b9c <__fp_inf>:
 b9c:	97 f9       	bld	r25, 7
 b9e:	9f 67       	ori	r25, 0x7F	; 127
 ba0:	80 e8       	ldi	r24, 0x80	; 128
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	08 95       	ret

00000ba8 <__fp_nan>:
 ba8:	9f ef       	ldi	r25, 0xFF	; 255
 baa:	80 ec       	ldi	r24, 0xC0	; 192
 bac:	08 95       	ret

00000bae <__fp_pscA>:
 bae:	00 24       	eor	r0, r0
 bb0:	0a 94       	dec	r0
 bb2:	16 16       	cp	r1, r22
 bb4:	17 06       	cpc	r1, r23
 bb6:	18 06       	cpc	r1, r24
 bb8:	09 06       	cpc	r0, r25
 bba:	08 95       	ret

00000bbc <__fp_pscB>:
 bbc:	00 24       	eor	r0, r0
 bbe:	0a 94       	dec	r0
 bc0:	12 16       	cp	r1, r18
 bc2:	13 06       	cpc	r1, r19
 bc4:	14 06       	cpc	r1, r20
 bc6:	05 06       	cpc	r0, r21
 bc8:	08 95       	ret

00000bca <__fp_round>:
 bca:	09 2e       	mov	r0, r25
 bcc:	03 94       	inc	r0
 bce:	00 0c       	add	r0, r0
 bd0:	11 f4       	brne	.+4      	; 0xbd6 <__fp_round+0xc>
 bd2:	88 23       	and	r24, r24
 bd4:	52 f0       	brmi	.+20     	; 0xbea <__fp_round+0x20>
 bd6:	bb 0f       	add	r27, r27
 bd8:	40 f4       	brcc	.+16     	; 0xbea <__fp_round+0x20>
 bda:	bf 2b       	or	r27, r31
 bdc:	11 f4       	brne	.+4      	; 0xbe2 <__fp_round+0x18>
 bde:	60 ff       	sbrs	r22, 0
 be0:	04 c0       	rjmp	.+8      	; 0xbea <__fp_round+0x20>
 be2:	6f 5f       	subi	r22, 0xFF	; 255
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	8f 4f       	sbci	r24, 0xFF	; 255
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	08 95       	ret

00000bec <__fp_split3>:
 bec:	57 fd       	sbrc	r21, 7
 bee:	90 58       	subi	r25, 0x80	; 128
 bf0:	44 0f       	add	r20, r20
 bf2:	55 1f       	adc	r21, r21
 bf4:	59 f0       	breq	.+22     	; 0xc0c <__fp_splitA+0x10>
 bf6:	5f 3f       	cpi	r21, 0xFF	; 255
 bf8:	71 f0       	breq	.+28     	; 0xc16 <__fp_splitA+0x1a>
 bfa:	47 95       	ror	r20

00000bfc <__fp_splitA>:
 bfc:	88 0f       	add	r24, r24
 bfe:	97 fb       	bst	r25, 7
 c00:	99 1f       	adc	r25, r25
 c02:	61 f0       	breq	.+24     	; 0xc1c <__fp_splitA+0x20>
 c04:	9f 3f       	cpi	r25, 0xFF	; 255
 c06:	79 f0       	breq	.+30     	; 0xc26 <__fp_splitA+0x2a>
 c08:	87 95       	ror	r24
 c0a:	08 95       	ret
 c0c:	12 16       	cp	r1, r18
 c0e:	13 06       	cpc	r1, r19
 c10:	14 06       	cpc	r1, r20
 c12:	55 1f       	adc	r21, r21
 c14:	f2 cf       	rjmp	.-28     	; 0xbfa <__fp_split3+0xe>
 c16:	46 95       	lsr	r20
 c18:	f1 df       	rcall	.-30     	; 0xbfc <__fp_splitA>
 c1a:	08 c0       	rjmp	.+16     	; 0xc2c <__fp_splitA+0x30>
 c1c:	16 16       	cp	r1, r22
 c1e:	17 06       	cpc	r1, r23
 c20:	18 06       	cpc	r1, r24
 c22:	99 1f       	adc	r25, r25
 c24:	f1 cf       	rjmp	.-30     	; 0xc08 <__fp_splitA+0xc>
 c26:	86 95       	lsr	r24
 c28:	71 05       	cpc	r23, r1
 c2a:	61 05       	cpc	r22, r1
 c2c:	08 94       	sec
 c2e:	08 95       	ret

00000c30 <__fp_zero>:
 c30:	e8 94       	clt

00000c32 <__fp_szero>:
 c32:	bb 27       	eor	r27, r27
 c34:	66 27       	eor	r22, r22
 c36:	77 27       	eor	r23, r23
 c38:	cb 01       	movw	r24, r22
 c3a:	97 f9       	bld	r25, 7
 c3c:	08 95       	ret

00000c3e <__mulsf3>:
 c3e:	0e 94 32 06 	call	0xc64	; 0xc64 <__mulsf3x>
 c42:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_round>
 c46:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscA>
 c4a:	38 f0       	brcs	.+14     	; 0xc5a <__mulsf3+0x1c>
 c4c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_pscB>
 c50:	20 f0       	brcs	.+8      	; 0xc5a <__mulsf3+0x1c>
 c52:	95 23       	and	r25, r21
 c54:	11 f0       	breq	.+4      	; 0xc5a <__mulsf3+0x1c>
 c56:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_inf>
 c5a:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_nan>
 c5e:	11 24       	eor	r1, r1
 c60:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_szero>

00000c64 <__mulsf3x>:
 c64:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_split3>
 c68:	70 f3       	brcs	.-36     	; 0xc46 <__mulsf3+0x8>

00000c6a <__mulsf3_pse>:
 c6a:	95 9f       	mul	r25, r21
 c6c:	c1 f3       	breq	.-16     	; 0xc5e <__mulsf3+0x20>
 c6e:	95 0f       	add	r25, r21
 c70:	50 e0       	ldi	r21, 0x00	; 0
 c72:	55 1f       	adc	r21, r21
 c74:	62 9f       	mul	r22, r18
 c76:	f0 01       	movw	r30, r0
 c78:	72 9f       	mul	r23, r18
 c7a:	bb 27       	eor	r27, r27
 c7c:	f0 0d       	add	r31, r0
 c7e:	b1 1d       	adc	r27, r1
 c80:	63 9f       	mul	r22, r19
 c82:	aa 27       	eor	r26, r26
 c84:	f0 0d       	add	r31, r0
 c86:	b1 1d       	adc	r27, r1
 c88:	aa 1f       	adc	r26, r26
 c8a:	64 9f       	mul	r22, r20
 c8c:	66 27       	eor	r22, r22
 c8e:	b0 0d       	add	r27, r0
 c90:	a1 1d       	adc	r26, r1
 c92:	66 1f       	adc	r22, r22
 c94:	82 9f       	mul	r24, r18
 c96:	22 27       	eor	r18, r18
 c98:	b0 0d       	add	r27, r0
 c9a:	a1 1d       	adc	r26, r1
 c9c:	62 1f       	adc	r22, r18
 c9e:	73 9f       	mul	r23, r19
 ca0:	b0 0d       	add	r27, r0
 ca2:	a1 1d       	adc	r26, r1
 ca4:	62 1f       	adc	r22, r18
 ca6:	83 9f       	mul	r24, r19
 ca8:	a0 0d       	add	r26, r0
 caa:	61 1d       	adc	r22, r1
 cac:	22 1f       	adc	r18, r18
 cae:	74 9f       	mul	r23, r20
 cb0:	33 27       	eor	r19, r19
 cb2:	a0 0d       	add	r26, r0
 cb4:	61 1d       	adc	r22, r1
 cb6:	23 1f       	adc	r18, r19
 cb8:	84 9f       	mul	r24, r20
 cba:	60 0d       	add	r22, r0
 cbc:	21 1d       	adc	r18, r1
 cbe:	82 2f       	mov	r24, r18
 cc0:	76 2f       	mov	r23, r22
 cc2:	6a 2f       	mov	r22, r26
 cc4:	11 24       	eor	r1, r1
 cc6:	9f 57       	subi	r25, 0x7F	; 127
 cc8:	50 40       	sbci	r21, 0x00	; 0
 cca:	9a f0       	brmi	.+38     	; 0xcf2 <__mulsf3_pse+0x88>
 ccc:	f1 f0       	breq	.+60     	; 0xd0a <__mulsf3_pse+0xa0>
 cce:	88 23       	and	r24, r24
 cd0:	4a f0       	brmi	.+18     	; 0xce4 <__mulsf3_pse+0x7a>
 cd2:	ee 0f       	add	r30, r30
 cd4:	ff 1f       	adc	r31, r31
 cd6:	bb 1f       	adc	r27, r27
 cd8:	66 1f       	adc	r22, r22
 cda:	77 1f       	adc	r23, r23
 cdc:	88 1f       	adc	r24, r24
 cde:	91 50       	subi	r25, 0x01	; 1
 ce0:	50 40       	sbci	r21, 0x00	; 0
 ce2:	a9 f7       	brne	.-22     	; 0xcce <__mulsf3_pse+0x64>
 ce4:	9e 3f       	cpi	r25, 0xFE	; 254
 ce6:	51 05       	cpc	r21, r1
 ce8:	80 f0       	brcs	.+32     	; 0xd0a <__mulsf3_pse+0xa0>
 cea:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_inf>
 cee:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_szero>
 cf2:	5f 3f       	cpi	r21, 0xFF	; 255
 cf4:	e4 f3       	brlt	.-8      	; 0xcee <__mulsf3_pse+0x84>
 cf6:	98 3e       	cpi	r25, 0xE8	; 232
 cf8:	d4 f3       	brlt	.-12     	; 0xcee <__mulsf3_pse+0x84>
 cfa:	86 95       	lsr	r24
 cfc:	77 95       	ror	r23
 cfe:	67 95       	ror	r22
 d00:	b7 95       	ror	r27
 d02:	f7 95       	ror	r31
 d04:	e7 95       	ror	r30
 d06:	9f 5f       	subi	r25, 0xFF	; 255
 d08:	c1 f7       	brne	.-16     	; 0xcfa <__mulsf3_pse+0x90>
 d0a:	fe 2b       	or	r31, r30
 d0c:	88 0f       	add	r24, r24
 d0e:	91 1d       	adc	r25, r1
 d10:	96 95       	lsr	r25
 d12:	87 95       	ror	r24
 d14:	97 f9       	bld	r25, 7
 d16:	08 95       	ret

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>
