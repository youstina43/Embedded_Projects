
Variable_DCmotor_Speed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000516  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  0000058a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3c  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000932  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bf  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000722  00000000  00000000  00003017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003739  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_10>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 89 02 	jmp	0x512	; 0x512 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "TIMER0_Interface.h"

#include <util/delay.h>

int main(void)
{   ADC_ConfigType ADC0 ;
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <main+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	ADC0.prescaler = F_ADC64;
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	8a 83       	std	Y+2, r24	; 0x02
	ADC0.ref_volt = AVCC;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	89 83       	std	Y+1, r24	; 0x01
	
	DIO_init();
  8e:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_init>
	ADC_init(&ADC0);
  92:	ce 01       	movw	r24, r28
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	0e 94 75 00 	call	0xea	; 0xea <ADC_init>
	TMR0_voidInit();
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <TMR0_voidInit>
	TMR0_voidStart();
  9e:	0e 94 c9 00 	call	0x192	; 0x192 <TMR0_voidStart>
	u16 AdcReading=0;
	u8 FastDuty=0;
    while (1) 
    {
		AdcReading = ADC_readChannel(ADC_CHANNEL_ZERO_ID);
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 89 00 	call	0x112	; 0x112 <ADC_readChannel>
		FastDuty = (u8)(((f32)(AdcReading*100))/1023);
  a8:	24 e6       	ldi	r18, 0x64	; 100
  aa:	ac 01       	movw	r20, r24
  ac:	24 9f       	mul	r18, r20
  ae:	c0 01       	movw	r24, r0
  b0:	25 9f       	mul	r18, r21
  b2:	90 0d       	add	r25, r0
  b4:	11 24       	eor	r1, r1
  b6:	bc 01       	movw	r22, r24
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__floatunsisf>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 ec       	ldi	r19, 0xC0	; 192
  c4:	4f e7       	ldi	r20, 0x7F	; 127
  c6:	54 e4       	ldi	r21, 0x44	; 68
  c8:	0e 94 4b 01 	call	0x296	; 0x296 <__divsf3>
  cc:	0e 94 bd 01 	call	0x37a	; 0x37a <__fixunssfsi>
  d0:	86 2f       	mov	r24, r22
		TMR0_voidSetDutyCycleFastPWM(FastDuty);
  d2:	0e 94 b6 00 	call	0x16c	; 0x16c <TMR0_voidSetDutyCycleFastPWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	5f e3       	ldi	r21, 0x3F	; 63
  d8:	8d e0       	ldi	r24, 0x0D	; 13
  da:	93 e0       	ldi	r25, 0x03	; 3
  dc:	51 50       	subi	r21, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x60>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x6a>
  e6:	00 00       	nop
  e8:	dc cf       	rjmp	.-72     	; 0xa2 <main+0x26>

000000ea <ADC_init>:
#include "ADC_Confg.h"
#include "ADC_Private.h"


void ADC_init(const ADC_ConfigType *Config_Ptr)
{
  ea:	fc 01       	movw	r30, r24
	/* Choosing the Reference voltage */
	ADMUX = (ADMUX & 0x3F) |(Config_Ptr->ref_volt<<6);
  ec:	47 b1       	in	r20, 0x07	; 7
  ee:	90 81       	ld	r25, Z
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	98 9f       	mul	r25, r24
  f4:	90 01       	movw	r18, r0
  f6:	11 24       	eor	r1, r1
  f8:	94 2f       	mov	r25, r20
  fa:	9f 73       	andi	r25, 0x3F	; 63
  fc:	29 2b       	or	r18, r25
  fe:	27 b9       	out	0x07, r18	; 7

	/* Activating the ADC */
	SET_BIT(ADCSRA,ADEN);
 100:	96 b1       	in	r25, 0x06	; 6
 102:	90 68       	ori	r25, 0x80	; 128
 104:	96 b9       	out	0x06, r25	; 6

	/* Setting F_ADC = F_CPU/x */
	ADCSRA = (ADCSRA & 0xF8) | Config_Ptr->prescaler;
 106:	86 b1       	in	r24, 0x06	; 6
 108:	91 81       	ldd	r25, Z+1	; 0x01
 10a:	88 7f       	andi	r24, 0xF8	; 248
 10c:	89 2b       	or	r24, r25
 10e:	86 b9       	out	0x06, r24	; 6
 110:	08 95       	ret

00000112 <ADC_readChannel>:
}


u16 ADC_readChannel(u8 channel_num)
{
	ADMUX &= 0xE0; /* Clearing the first 5 bits */
 112:	97 b1       	in	r25, 0x07	; 7
 114:	90 7e       	andi	r25, 0xE0	; 224
 116:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* Choosing which channel will be used*/
 118:	97 b1       	in	r25, 0x07	; 7
 11a:	89 2b       	or	r24, r25
 11c:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); /* Start Conversion   */
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	80 64       	ori	r24, 0x40	; 64
 122:	86 b9       	out	0x06, r24	; 6

	while(GET_BIT(ADCSRA,ADIF)==0); /* Based ON pulling method */
 124:	34 9b       	sbis	0x06, 4	; 6
 126:	fe cf       	rjmp	.-4      	; 0x124 <ADC_readChannel+0x12>

	SET_BIT(ADCSRA,ADIF); /* Clearing the flag register */
 128:	86 b1       	in	r24, 0x06	; 6
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	86 b9       	out	0x06, r24	; 6

	return ADC; /* Read the digital value from the data register */
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	95 b1       	in	r25, 0x05	; 5
}
 132:	08 95       	ret

00000134 <DIO_init>:
#include "DIO_Private.h"

void DIO_init(void)
{
	/*Set Initial Directions FOR Pins */
	DDRA = CONC(DIO_PA7_INITIAL_DIRECTION,DIO_PA6_INITIAL_DIRECTION,DIO_PA5_INITIAL_DIRECTION,DIO_PA4_INITIAL_DIRECTION,
 134:	8c ef       	ldi	r24, 0xFC	; 252
 136:	8a bb       	out	0x1a, r24	; 26
	DIO_PA3_INITIAL_DIRECTION,DIO_PA2_INITIAL_DIRECTION,DIO_PA1_INITIAL_DIRECTION,DIO_PA0_INITIAL_DIRECTION);
	
	DDRB = CONC(DIO_PB7_INITIAL_DIRECTION,DIO_PB6_INITIAL_DIRECTION,DIO_PB5_INITIAL_DIRECTION,DIO_PB4_INITIAL_DIRECTION,
 138:	9f ef       	ldi	r25, 0xFF	; 255
 13a:	97 bb       	out	0x17, r25	; 23
	DIO_PB3_INITIAL_DIRECTION,DIO_PB2_INITIAL_DIRECTION,DIO_PB1_INITIAL_DIRECTION,DIO_PB0_INITIAL_DIRECTION);
	
	DDRC = CONC(DIO_PC7_INITIAL_DIRECTION,DIO_PC6_INITIAL_DIRECTION,DIO_PC5_INITIAL_DIRECTION,DIO_PC4_INITIAL_DIRECTION,
 13c:	9d e3       	ldi	r25, 0x3D	; 61
 13e:	94 bb       	out	0x14, r25	; 20
	DIO_PC3_INITIAL_DIRECTION,DIO_PC2_INITIAL_DIRECTION,DIO_PC1_INITIAL_DIRECTION,DIO_PC0_INITIAL_DIRECTION);
	
	DDRD = CONC(DIO_PD7_INITIAL_DIRECTION,DIO_PD6_INITIAL_DIRECTION,DIO_PD5_INITIAL_DIRECTION,DIO_PD4_INITIAL_DIRECTION,
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	91 bb       	out	0x11, r25	; 17
	DIO_PD3_INITIAL_DIRECTION,DIO_PD2_INITIAL_DIRECTION,DIO_PD1_INITIAL_DIRECTION,DIO_PD0_INITIAL_DIRECTION);
	
	/*Set Initial Values FOR Pins */
	PORTA = CONC(DIO_PA7_INITIAL_VALUE,DIO_PA6_INITIAL_VALUE,DIO_PA5_INITIAL_VALUE,DIO_PA4_INITIAL_VALUE,
 144:	1b ba       	out	0x1b, r1	; 27
	DIO_PA3_INITIAL_VALUE,DIO_PA2_INITIAL_VALUE,DIO_PA1_INITIAL_VALUE,DIO_PA0_INITIAL_VALUE);
	
	PORTB = CONC(DIO_PB7_INITIAL_VALUE,DIO_PB6_INITIAL_VALUE,DIO_PB5_INITIAL_VALUE,DIO_PB4_INITIAL_VALUE,
 146:	98 e6       	ldi	r25, 0x68	; 104
 148:	98 bb       	out	0x18, r25	; 24
	DIO_PB3_INITIAL_VALUE,DIO_PB2_INITIAL_VALUE,DIO_PB1_INITIAL_VALUE,DIO_PB0_INITIAL_VALUE);
	
	PORTC = CONC(DIO_PC7_INITIAL_VALUE,DIO_PC6_INITIAL_VALUE,DIO_PC5_INITIAL_VALUE,DIO_PC4_INITIAL_VALUE,
 14a:	9c e3       	ldi	r25, 0x3C	; 60
 14c:	95 bb       	out	0x15, r25	; 21
	DIO_PC3_INITIAL_VALUE,DIO_PC2_INITIAL_VALUE,DIO_PC1_INITIAL_VALUE,DIO_PC0_INITIAL_VALUE);
	
	PORTD = CONC(DIO_PD7_INITIAL_VALUE,DIO_PD6_INITIAL_VALUE,DIO_PD5_INITIAL_VALUE,DIO_PD4_INITIAL_VALUE,
 14e:	82 bb       	out	0x12, r24	; 18
 150:	08 95       	ret

00000152 <TMR0_voidInit>:
}

void TMR0_voidSetDelay_ms_usingCTC(u16 COPY_delayTime)
{   //shoud presacler 64 tick time 4
	OCR0=TMR0_CTC_COUNTER;
	private_counterCTC = COPY_delayTime;
 152:	83 b7       	in	r24, 0x33	; 51
 154:	80 64       	ori	r24, 0x40	; 64
 156:	83 bf       	out	0x33, r24	; 51
 158:	83 b7       	in	r24, 0x33	; 51
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	83 bf       	out	0x33, r24	; 51
 15e:	83 b7       	in	r24, 0x33	; 51
 160:	8f 7e       	andi	r24, 0xEF	; 239
 162:	83 bf       	out	0x33, r24	; 51
 164:	83 b7       	in	r24, 0x33	; 51
 166:	80 62       	ori	r24, 0x20	; 32
 168:	83 bf       	out	0x33, r24	; 51
 16a:	08 95       	ret

0000016c <TMR0_voidSetDutyCycleFastPWM>:
 16c:	85 36       	cpi	r24, 0x65	; 101
 16e:	80 f4       	brcc	.+32     	; 0x190 <TMR0_voidSetDutyCycleFastPWM+0x24>
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	32 2f       	mov	r19, r18
 176:	22 27       	eor	r18, r18
 178:	36 95       	lsr	r19
 17a:	27 95       	ror	r18
 17c:	36 95       	lsr	r19
 17e:	27 95       	ror	r18
 180:	ab e7       	ldi	r26, 0x7B	; 123
 182:	b4 e1       	ldi	r27, 0x14	; 20
 184:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__umulhisi3>
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	8c bf       	out	0x3c, r24	; 60
 190:	08 95       	ret

00000192 <TMR0_voidStart>:
 192:	83 b7       	in	r24, 0x33	; 51
 194:	81 60       	ori	r24, 0x01	; 1
 196:	83 bf       	out	0x33, r24	; 51
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	83 bf       	out	0x33, r24	; 51
 19e:	83 b7       	in	r24, 0x33	; 51
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	83 bf       	out	0x33, r24	; 51
 1a4:	08 95       	ret

000001a6 <__vector_11>:
	
	
}
void __vector_11(void) __attribute__ ((signal));
void __vector_11(void) 
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	static u16 count=0;
	count++;
 1c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count.1631>
 1cc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count.1631+0x1>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count.1631+0x1>
 1d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count.1631>
	if(count == TMR0_OVER_FLOW_COUNTER)
 1da:	81 3d       	cpi	r24, 0xD1	; 209
 1dc:	93 40       	sbci	r25, 0x03	; 3
 1de:	69 f4       	brne	.+26     	; 0x1fa <__vector_11+0x54>
	{
		count=0;
 1e0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count.1631+0x1>
 1e4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <count.1631>
		TCNT0=PRELOAD_VALUE;
 1e8:	81 e7       	ldi	r24, 0x71	; 113
 1ea:	82 bf       	out	0x32, r24	; 50
		if (Private_callbackPTR != NULL)
 1ec:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Private_callbackPTR>
 1f0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <Private_callbackPTR+0x1>
 1f4:	30 97       	sbiw	r30, 0x00	; 0
 1f6:	09 f0       	breq	.+2      	; 0x1fa <__vector_11+0x54>
		{
			Private_callbackPTR();
 1f8:	09 95       	icall
		}
		
	}
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_10>:


void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	static u16 CTC_count=0;
	CTC_count++;
 23e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 242:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 24c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(CTC_count == private_counterCTC)
 250:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <private_counterCTC>
 254:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <private_counterCTC+0x1>
 258:	82 17       	cp	r24, r18
 25a:	93 07       	cpc	r25, r19
 25c:	59 f4       	brne	.+22     	; 0x274 <__vector_10+0x58>
	{
		CTC_count=0;
 25e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 262:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if (Private_callbackCTCPTR != NULL)
 266:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Private_callbackCTCPTR>
 26a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Private_callbackCTCPTR+0x1>
 26e:	30 97       	sbiw	r30, 0x00	; 0
 270:	09 f0       	breq	.+2      	; 0x274 <__vector_10+0x58>
		{
			Private_callbackCTCPTR();
 272:	09 95       	icall
		}
		
	}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__divsf3>:
 296:	0e 94 5f 01 	call	0x2be	; 0x2be <__divsf3x>
 29a:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_round>
 29e:	0e 94 39 02 	call	0x472	; 0x472 <__fp_pscB>
 2a2:	58 f0       	brcs	.+22     	; 0x2ba <__divsf3+0x24>
 2a4:	0e 94 32 02 	call	0x464	; 0x464 <__fp_pscA>
 2a8:	40 f0       	brcs	.+16     	; 0x2ba <__divsf3+0x24>
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <__divsf3+0x20>
 2ac:	5f 3f       	cpi	r21, 0xFF	; 255
 2ae:	29 f0       	breq	.+10     	; 0x2ba <__divsf3+0x24>
 2b0:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_inf>
 2b4:	51 11       	cpse	r21, r1
 2b6:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_szero>
 2ba:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__fp_nan>

000002be <__divsf3x>:
 2be:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_split3>
 2c2:	68 f3       	brcs	.-38     	; 0x29e <__divsf3+0x8>

000002c4 <__divsf3_pse>:
 2c4:	99 23       	and	r25, r25
 2c6:	b1 f3       	breq	.-20     	; 0x2b4 <__divsf3+0x1e>
 2c8:	55 23       	and	r21, r21
 2ca:	91 f3       	breq	.-28     	; 0x2b0 <__divsf3+0x1a>
 2cc:	95 1b       	sub	r25, r21
 2ce:	55 0b       	sbc	r21, r21
 2d0:	bb 27       	eor	r27, r27
 2d2:	aa 27       	eor	r26, r26
 2d4:	62 17       	cp	r22, r18
 2d6:	73 07       	cpc	r23, r19
 2d8:	84 07       	cpc	r24, r20
 2da:	38 f0       	brcs	.+14     	; 0x2ea <__divsf3_pse+0x26>
 2dc:	9f 5f       	subi	r25, 0xFF	; 255
 2de:	5f 4f       	sbci	r21, 0xFF	; 255
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	44 1f       	adc	r20, r20
 2e6:	aa 1f       	adc	r26, r26
 2e8:	a9 f3       	breq	.-22     	; 0x2d4 <__divsf3_pse+0x10>
 2ea:	35 d0       	rcall	.+106    	; 0x356 <__divsf3_pse+0x92>
 2ec:	0e 2e       	mov	r0, r30
 2ee:	3a f0       	brmi	.+14     	; 0x2fe <__divsf3_pse+0x3a>
 2f0:	e0 e8       	ldi	r30, 0x80	; 128
 2f2:	32 d0       	rcall	.+100    	; 0x358 <__divsf3_pse+0x94>
 2f4:	91 50       	subi	r25, 0x01	; 1
 2f6:	50 40       	sbci	r21, 0x00	; 0
 2f8:	e6 95       	lsr	r30
 2fa:	00 1c       	adc	r0, r0
 2fc:	ca f7       	brpl	.-14     	; 0x2f0 <__divsf3_pse+0x2c>
 2fe:	2b d0       	rcall	.+86     	; 0x356 <__divsf3_pse+0x92>
 300:	fe 2f       	mov	r31, r30
 302:	29 d0       	rcall	.+82     	; 0x356 <__divsf3_pse+0x92>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	88 1f       	adc	r24, r24
 30a:	bb 1f       	adc	r27, r27
 30c:	26 17       	cp	r18, r22
 30e:	37 07       	cpc	r19, r23
 310:	48 07       	cpc	r20, r24
 312:	ab 07       	cpc	r26, r27
 314:	b0 e8       	ldi	r27, 0x80	; 128
 316:	09 f0       	breq	.+2      	; 0x31a <__divsf3_pse+0x56>
 318:	bb 0b       	sbc	r27, r27
 31a:	80 2d       	mov	r24, r0
 31c:	bf 01       	movw	r22, r30
 31e:	ff 27       	eor	r31, r31
 320:	93 58       	subi	r25, 0x83	; 131
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	3a f0       	brmi	.+14     	; 0x334 <__divsf3_pse+0x70>
 326:	9e 3f       	cpi	r25, 0xFE	; 254
 328:	51 05       	cpc	r21, r1
 32a:	78 f0       	brcs	.+30     	; 0x34a <__divsf3_pse+0x86>
 32c:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_inf>
 330:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_szero>
 334:	5f 3f       	cpi	r21, 0xFF	; 255
 336:	e4 f3       	brlt	.-8      	; 0x330 <__divsf3_pse+0x6c>
 338:	98 3e       	cpi	r25, 0xE8	; 232
 33a:	d4 f3       	brlt	.-12     	; 0x330 <__divsf3_pse+0x6c>
 33c:	86 95       	lsr	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b7 95       	ror	r27
 344:	f7 95       	ror	r31
 346:	9f 5f       	subi	r25, 0xFF	; 255
 348:	c9 f7       	brne	.-14     	; 0x33c <__divsf3_pse+0x78>
 34a:	88 0f       	add	r24, r24
 34c:	91 1d       	adc	r25, r1
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	97 f9       	bld	r25, 7
 354:	08 95       	ret
 356:	e1 e0       	ldi	r30, 0x01	; 1
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	bb 1f       	adc	r27, r27
 360:	62 17       	cp	r22, r18
 362:	73 07       	cpc	r23, r19
 364:	84 07       	cpc	r24, r20
 366:	ba 07       	cpc	r27, r26
 368:	20 f0       	brcs	.+8      	; 0x372 <__divsf3_pse+0xae>
 36a:	62 1b       	sub	r22, r18
 36c:	73 0b       	sbc	r23, r19
 36e:	84 0b       	sbc	r24, r20
 370:	ba 0b       	sbc	r27, r26
 372:	ee 1f       	adc	r30, r30
 374:	88 f7       	brcc	.-30     	; 0x358 <__divsf3_pse+0x94>
 376:	e0 95       	com	r30
 378:	08 95       	ret

0000037a <__fixunssfsi>:
 37a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__fp_splitA>
 37e:	88 f0       	brcs	.+34     	; 0x3a2 <__fixunssfsi+0x28>
 380:	9f 57       	subi	r25, 0x7F	; 127
 382:	98 f0       	brcs	.+38     	; 0x3aa <__fixunssfsi+0x30>
 384:	b9 2f       	mov	r27, r25
 386:	99 27       	eor	r25, r25
 388:	b7 51       	subi	r27, 0x17	; 23
 38a:	b0 f0       	brcs	.+44     	; 0x3b8 <__fixunssfsi+0x3e>
 38c:	e1 f0       	breq	.+56     	; 0x3c6 <__fixunssfsi+0x4c>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	1a f0       	brmi	.+6      	; 0x39e <__fixunssfsi+0x24>
 398:	ba 95       	dec	r27
 39a:	c9 f7       	brne	.-14     	; 0x38e <__fixunssfsi+0x14>
 39c:	14 c0       	rjmp	.+40     	; 0x3c6 <__fixunssfsi+0x4c>
 39e:	b1 30       	cpi	r27, 0x01	; 1
 3a0:	91 f0       	breq	.+36     	; 0x3c6 <__fixunssfsi+0x4c>
 3a2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fp_zero>
 3a6:	b1 e0       	ldi	r27, 0x01	; 1
 3a8:	08 95       	ret
 3aa:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_zero>
 3ae:	67 2f       	mov	r22, r23
 3b0:	78 2f       	mov	r23, r24
 3b2:	88 27       	eor	r24, r24
 3b4:	b8 5f       	subi	r27, 0xF8	; 248
 3b6:	39 f0       	breq	.+14     	; 0x3c6 <__fixunssfsi+0x4c>
 3b8:	b9 3f       	cpi	r27, 0xF9	; 249
 3ba:	cc f3       	brlt	.-14     	; 0x3ae <__fixunssfsi+0x34>
 3bc:	86 95       	lsr	r24
 3be:	77 95       	ror	r23
 3c0:	67 95       	ror	r22
 3c2:	b3 95       	inc	r27
 3c4:	d9 f7       	brne	.-10     	; 0x3bc <__fixunssfsi+0x42>
 3c6:	3e f4       	brtc	.+14     	; 0x3d6 <__fixunssfsi+0x5c>
 3c8:	90 95       	com	r25
 3ca:	80 95       	com	r24
 3cc:	70 95       	com	r23
 3ce:	61 95       	neg	r22
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	8f 4f       	sbci	r24, 0xFF	; 255
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	08 95       	ret

000003d8 <__floatunsisf>:
 3d8:	e8 94       	clt
 3da:	09 c0       	rjmp	.+18     	; 0x3ee <__floatsisf+0x12>

000003dc <__floatsisf>:
 3dc:	97 fb       	bst	r25, 7
 3de:	3e f4       	brtc	.+14     	; 0x3ee <__floatsisf+0x12>
 3e0:	90 95       	com	r25
 3e2:	80 95       	com	r24
 3e4:	70 95       	com	r23
 3e6:	61 95       	neg	r22
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	8f 4f       	sbci	r24, 0xFF	; 255
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	99 23       	and	r25, r25
 3f0:	a9 f0       	breq	.+42     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f2:	f9 2f       	mov	r31, r25
 3f4:	96 e9       	ldi	r25, 0x96	; 150
 3f6:	bb 27       	eor	r27, r27
 3f8:	93 95       	inc	r25
 3fa:	f6 95       	lsr	r31
 3fc:	87 95       	ror	r24
 3fe:	77 95       	ror	r23
 400:	67 95       	ror	r22
 402:	b7 95       	ror	r27
 404:	f1 11       	cpse	r31, r1
 406:	f8 cf       	rjmp	.-16     	; 0x3f8 <__floatsisf+0x1c>
 408:	fa f4       	brpl	.+62     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 40a:	bb 0f       	add	r27, r27
 40c:	11 f4       	brne	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	60 ff       	sbrs	r22, 0
 410:	1b c0       	rjmp	.+54     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 412:	6f 5f       	subi	r22, 0xFF	; 255
 414:	7f 4f       	sbci	r23, 0xFF	; 255
 416:	8f 4f       	sbci	r24, 0xFF	; 255
 418:	9f 4f       	sbci	r25, 0xFF	; 255
 41a:	16 c0       	rjmp	.+44     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 41c:	88 23       	and	r24, r24
 41e:	11 f0       	breq	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	96 e9       	ldi	r25, 0x96	; 150
 422:	11 c0       	rjmp	.+34     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 424:	77 23       	and	r23, r23
 426:	21 f0       	breq	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 428:	9e e8       	ldi	r25, 0x8E	; 142
 42a:	87 2f       	mov	r24, r23
 42c:	76 2f       	mov	r23, r22
 42e:	05 c0       	rjmp	.+10     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 430:	66 23       	and	r22, r22
 432:	71 f0       	breq	.+28     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 434:	96 e8       	ldi	r25, 0x86	; 134
 436:	86 2f       	mov	r24, r22
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	2a f0       	brmi	.+10     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 43e:	9a 95       	dec	r25
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	da f7       	brpl	.-10     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 448:	88 0f       	add	r24, r24
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	97 f9       	bld	r25, 7
 450:	08 95       	ret

00000452 <__fp_inf>:
 452:	97 f9       	bld	r25, 7
 454:	9f 67       	ori	r25, 0x7F	; 127
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	08 95       	ret

0000045e <__fp_nan>:
 45e:	9f ef       	ldi	r25, 0xFF	; 255
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	08 95       	ret

00000464 <__fp_pscA>:
 464:	00 24       	eor	r0, r0
 466:	0a 94       	dec	r0
 468:	16 16       	cp	r1, r22
 46a:	17 06       	cpc	r1, r23
 46c:	18 06       	cpc	r1, r24
 46e:	09 06       	cpc	r0, r25
 470:	08 95       	ret

00000472 <__fp_pscB>:
 472:	00 24       	eor	r0, r0
 474:	0a 94       	dec	r0
 476:	12 16       	cp	r1, r18
 478:	13 06       	cpc	r1, r19
 47a:	14 06       	cpc	r1, r20
 47c:	05 06       	cpc	r0, r21
 47e:	08 95       	ret

00000480 <__fp_round>:
 480:	09 2e       	mov	r0, r25
 482:	03 94       	inc	r0
 484:	00 0c       	add	r0, r0
 486:	11 f4       	brne	.+4      	; 0x48c <__fp_round+0xc>
 488:	88 23       	and	r24, r24
 48a:	52 f0       	brmi	.+20     	; 0x4a0 <__fp_round+0x20>
 48c:	bb 0f       	add	r27, r27
 48e:	40 f4       	brcc	.+16     	; 0x4a0 <__fp_round+0x20>
 490:	bf 2b       	or	r27, r31
 492:	11 f4       	brne	.+4      	; 0x498 <__fp_round+0x18>
 494:	60 ff       	sbrs	r22, 0
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__fp_round+0x20>
 498:	6f 5f       	subi	r22, 0xFF	; 255
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	8f 4f       	sbci	r24, 0xFF	; 255
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <__fp_split3>:
 4a2:	57 fd       	sbrc	r21, 7
 4a4:	90 58       	subi	r25, 0x80	; 128
 4a6:	44 0f       	add	r20, r20
 4a8:	55 1f       	adc	r21, r21
 4aa:	59 f0       	breq	.+22     	; 0x4c2 <__fp_splitA+0x10>
 4ac:	5f 3f       	cpi	r21, 0xFF	; 255
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__fp_splitA+0x1a>
 4b0:	47 95       	ror	r20

000004b2 <__fp_splitA>:
 4b2:	88 0f       	add	r24, r24
 4b4:	97 fb       	bst	r25, 7
 4b6:	99 1f       	adc	r25, r25
 4b8:	61 f0       	breq	.+24     	; 0x4d2 <__fp_splitA+0x20>
 4ba:	9f 3f       	cpi	r25, 0xFF	; 255
 4bc:	79 f0       	breq	.+30     	; 0x4dc <__fp_splitA+0x2a>
 4be:	87 95       	ror	r24
 4c0:	08 95       	ret
 4c2:	12 16       	cp	r1, r18
 4c4:	13 06       	cpc	r1, r19
 4c6:	14 06       	cpc	r1, r20
 4c8:	55 1f       	adc	r21, r21
 4ca:	f2 cf       	rjmp	.-28     	; 0x4b0 <__fp_split3+0xe>
 4cc:	46 95       	lsr	r20
 4ce:	f1 df       	rcall	.-30     	; 0x4b2 <__fp_splitA>
 4d0:	08 c0       	rjmp	.+16     	; 0x4e2 <__fp_splitA+0x30>
 4d2:	16 16       	cp	r1, r22
 4d4:	17 06       	cpc	r1, r23
 4d6:	18 06       	cpc	r1, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	f1 cf       	rjmp	.-30     	; 0x4be <__fp_splitA+0xc>
 4dc:	86 95       	lsr	r24
 4de:	71 05       	cpc	r23, r1
 4e0:	61 05       	cpc	r22, r1
 4e2:	08 94       	sec
 4e4:	08 95       	ret

000004e6 <__fp_zero>:
 4e6:	e8 94       	clt

000004e8 <__fp_szero>:
 4e8:	bb 27       	eor	r27, r27
 4ea:	66 27       	eor	r22, r22
 4ec:	77 27       	eor	r23, r23
 4ee:	cb 01       	movw	r24, r22
 4f0:	97 f9       	bld	r25, 7
 4f2:	08 95       	ret

000004f4 <__umulhisi3>:
 4f4:	a2 9f       	mul	r26, r18
 4f6:	b0 01       	movw	r22, r0
 4f8:	b3 9f       	mul	r27, r19
 4fa:	c0 01       	movw	r24, r0
 4fc:	a3 9f       	mul	r26, r19
 4fe:	70 0d       	add	r23, r0
 500:	81 1d       	adc	r24, r1
 502:	11 24       	eor	r1, r1
 504:	91 1d       	adc	r25, r1
 506:	b2 9f       	mul	r27, r18
 508:	70 0d       	add	r23, r0
 50a:	81 1d       	adc	r24, r1
 50c:	11 24       	eor	r1, r1
 50e:	91 1d       	adc	r25, r1
 510:	08 95       	ret

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>
